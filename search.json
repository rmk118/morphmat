[{"path":"https://rmk118.github.io/morphmat/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 morphmat authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rmk118.github.io/morphmat/articles/broken-stick.html","id":"segmented-package","dir":"Articles","previous_headings":"","what":"segmented package","title":"Broken-stick methods","text":"powerful customizable method implementing broken-stick regression provided R package segmented, cited many papers using morphometric data estimate size maturity. Note segmented includes three different methods compute confidence intervals, details discussed Muggeo (2017). also possible estimate 95% CIs via bootstrap resampling, computation time required relatively high resulting estimates around values “delta” “gradient” methods included segmented package.  segmented package three built-methods get 95% confidence intervals break point: can also use ANOVA test compare segmented model single linear model: SM50 estimate simulated crab data R package segmented","code":"lm_orig <- lm(y ~ x, data = fc) lm_orig_seg <- segmented::segmented(lm_orig) plot(lm_orig_seg) #> Delta method: #>           Est. CI(95%).low CI(95%).up #> psi1.x 59.2594     52.0697     66.449 #> Score method: #>           Est. CI(95%).low CI(95%).up #> psi1.x 59.2594     51.6198    65.0947 #> Gradient method: #>           Est. CI(95%).low CI(95%).up #> psi1.x 59.2594      51.016    67.7093 anova(lm_orig, lm_orig_seg) #> Analysis of Variance Table #>  #> Model 1: y ~ x #> Model 2: y ~ x + U1.x + psi1.x #>   Res.Df    RSS Df Sum of Sq      F   Pr(>F)     #> 1    798 7681.8                                  #> 2    796 7496.5  2    185.29 9.8375 6.02e-05 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://rmk118.github.io/morphmat/articles/broken-stick.html","id":"chngpt-package","dir":"Articles","previous_headings":"","what":"chngpt package","title":"Broken-stick methods","text":"Another R package capability segmented regression called chngpt. package differs slightly segmented types threshold models supported, optimization algorithms used parameter estimation, method(s) used calculate confidence intervals breakpoint (Fong et al. 2017). Broken-stick model package chngpt Log likelihood model various breakpoint values Bootstrap 95% confidence intervals segmented package, seems significantly underestimated SM50 compared true value 75, contained within bootstrap confidence intervals. alternative method calculating confidence intervals (“model-based”) produces similar results default bootstrap method. Adding starting breakpoint value 75 (.e., initializing search correct value) “chngpt.init” argument affect estimate, although result narrower confidence intervals: method EXTREMELY sensitive “lb.quantile” “ub.quantile” arguments, refer lower upper bounds search range change point estimate, respectively (function defaults 0.05 0.95). example, change lower quantile bound 0.33 upper 0.66, model return SM50 value closer true value 75 mm. estimates accuracy also change dramatically even slightly different variations data exact underlying structure. Results detailed investigations sensitivity modeling approach available forthcoming paper (Krasnow et al., prep). Although test options , chngpt package supports 14 different types two-phase (one threshold) models, well one three-phase model: see Fig. 1 Son Fong (2021). Importantly, also supports generalized linear models linear mixed models, can fit models utilizing family can passed glm include covariates random effects. Additional benefits package include several functions simulate data significant capability user-friendly customization. Options include providing grid changepoints iterate , using five different types bootstrap CIs numerous options type, providing bound slope parameters lines either side breakpoint, changing search/optimization algorithm parameter estimation meet needs data (e.g., “fastgrid2” fast might helpful large data sets). Using “chngpt.test” function run significance tests: interesting function returns slightly different breakpoint/threshold estimate chngptm() function called using default search region bounds (regardless set.seed set calling functions). Additionally, test statistic model less accurate breakpoint estimate much higher accurate model, yielding lower p-value.","code":"fit_chngpt <- chngptm(   formula.1 = y ~ 1,   formula.2 =  ~ x,   family = \"gaussian\",   data = fc,   type = \"segmented\",   var.type = \"default\",   weights = NULL ) summary(fit_chngpt) #> Change point model threshold.type:  segmented  #>  #> Coefficients: #>                    est Std. Error*     (lower    upper)     p.value* #> (Intercept) -0.1642533  0.84261672 -2.0797746 1.2232829 8.454458e-01 #> x            0.1775513  0.01840241  0.1477799 0.2199174 4.999353e-22 #> (x-chngpt)+  0.1626764  0.01871295  0.1230745 0.1964292 3.522081e-18 #>  #> Threshold: #>        est Std. Error     (lower     upper)  #>  59.259390   2.342262  55.983514  65.165182 summary(   chngptm(     formula.1 = y ~ 1,     formula.2 =  ~ x,     family = \"gaussian\",     data = fc,     type = \"segmented\",     var.type = \"model\", # note change from default to model     weights = NULL   ) )[[\"chngpt\"]] #>        est Std. Error     (lower     upper)  #>  59.259390   4.019829  51.157970  66.915699 summary(   chngptm(     formula.1 = y ~ 1,     formula.2 =  ~ x,     family = \"gaussian\",     data = fc,     type = \"segmented\",     chngpt.init = 75,     weights = NULL   ) )[[\"chngpt\"]] #>        est Std. Error     (lower     upper)  #>  59.259390   2.342262  55.983514  65.165182 summary(   chngptm(     formula.1 = y ~ 1,     formula.2 =  ~ x,     family = \"gaussian\",     data = fc,     type = \"segmented\",     var.type = \"model\",     lb.quantile = 0.33,     ub.quantile = 0.66,     weights = NULL   ) )[[\"chngpt\"]][1] #>      est  #> 77.05939 # Model with default upper and lower bounds chngpt.test(   formula.null = y ~ 1,   formula.chngpt = ~ x,   family = \"gaussian\",   data = fc,   type = \"segmented\" ) #>  #>  Maximum of Likelihood Ratio Statistics #>  #> data:  fc #> Maximal statistic = 19.533, threshold = 59.306, p-value = 4e-05 #> alternative hypothesis: two-sided  # Model with better upper and lower bounds to return # the true SM50 of 75 mm (0.6 and 0.3) chngpt.test(   formula.null = y ~ 1,   formula.chngpt = ~ x,   family = \"gaussian\",   data = fc,   type = \"segmented\",   lb.quantile = 0.3,   ub.quantile = 0.6 ) #>  #>  Maximum of Likelihood Ratio Statistics #>  #> data:  fc #> Maximal statistic = 7.7314, threshold = 75.475, p-value = 0.01028 #> alternative hypothesis: two-sided"},{"path":"https://rmk118.github.io/morphmat/articles/broken-stick.html","id":"regrans","dir":"Articles","previous_headings":"","what":"REGRANS","title":"Broken-stick methods","text":"also test broken-stick method manually coding algorithm identify appropriate breakpoint. following code conceptually similar R version REGRANS, initially written 1993 programming language BASIC (Pezzuto 1993). can optionally define lower upper limits changepoints want function test; otherwise, tests user-defined number evenly-spaced values (default = 100) ranging 0.2 quantile 0.8 quantile x-axis variable.  previous broken-stick methods, REGRANS tends underestimate SM50 model estimates highly sensitive values upper lower bounds region considered plausible contain SM50 value.","code":"regrans_est <- regrans_fun(fc, \"x\", \"y\", verbose = FALSE) regrans_est #> [1] 69.35071"},{"path":"https://rmk118.github.io/morphmat/articles/broken-stick.html","id":"crab_maturity-type-a-stevens","dir":"Articles","previous_headings":"","what":"Crab_Maturity Type A (Stevens)","title":"Broken-stick methods","text":"third algorithm using segmented regression estimate SM50 written Dr. Bradley Stevens University Maryland Eastern Shore. code part Crab_Maturity program available GitHub. several different methods included within Crab_Maturity; segmented regression approach included differs segmented REGRANS methods possible SM50 values restricted values x-variable present data set.","code":"stevens_est <- broken_stick_stevens(fc, \"x\", \"y\", verbose = FALSE) stevens_est #> [1] 73.51211"},{"path":[]},{"path":"https://rmk118.github.io/morphmat/articles/classification.html","id":"clustering-methods","dir":"Articles","previous_headings":"","what":"Clustering methods","title":"Classification methods","text":"hclust, kmeans, hkmeans, PAM, OPTICS, DBSCAN, HDBSCAN, Somerton method, mclust","code":""},{"path":"https://rmk118.github.io/morphmat/articles/classification.html","id":"somerton-method","dir":"Articles","previous_headings":"Clustering methods","what":"Somerton method","title":"Classification methods","text":"","code":"out_df <- somerton_fun(fc, xvar = \"x\", yvar = \"y\")[[1]] mod <- glm(data = out_df,            pred_mat_num ~ x,            family = binomial(link = \"logit\")) unname(-coef(mod)[1] / coef(mod)[2]) #> [1] 78.37427"},{"path":[]},{"path":"https://rmk118.github.io/morphmat/articles/classification.html","id":"inflection-point-discriminant-method","dir":"Articles","previous_headings":"Other classification methods","what":"Inflection point discriminant method","title":"Classification methods","text":"Simulated data addition linear discriminant function identified via inflection point method line can used classify point immature mature, enabling logistic regression applied estimate SM50:","code":"disc <- infl_pt(fc, \"x\", \"y\", plot = TRUE) ggplot() +   geom_point(data = fc, aes(x, y), alpha = 0.4) +   labs(x = \"CW (mm)\", y = \"CH (mm)\", ) +   mytheme + geom_abline(slope = disc, color = \"red\", linewidth = 1.3) fc_infl_pt <- fc %>% mutate(pred_mat = as.factor(if_else(y / x > disc, 1, 0)),                             correct = if_else(pred_mat == mature, TRUE, FALSE)) if (rlang::is_installed(\"patchwork\")) {   (ggplot() +       geom_point(data = fc_infl_pt, aes(x, y, color = mature), alpha = 0.4) +       labs(x = \"CW (mm)\", y = \"CH (mm)\", title = \"True maturity\") +       mytheme) +     (ggplot() +         geom_point(data = fc_infl_pt, aes(x, y, color = pred_mat), alpha = 0.4) +         labs(x = \"CW (mm)\", y = \"CH (mm)\", title = \"Predicted maturity\") +         mytheme) } else {   ggplot() +     geom_point(data = fc_infl_pt, aes(x, y, color = mature), alpha = 0.4) +     labs(x = \"CW (mm)\", y = \"CH (mm)\", title = \"True maturity\") +     mytheme      ggplot() +     geom_point(data = fc_infl_pt, aes(x, y, color = pred_mat), alpha = 0.4) +     labs(x = \"CW (mm)\", y = \"CH (mm)\", title = \"Predicted maturity\") +     mytheme } infl_pt_mod <- glm(pred_mat ~ x,                    family = binomial(link = \"logit\"),                    data = fc_infl_pt)  # SM50 = -A/B unname(-coef(infl_pt_mod)[1] / coef(infl_pt_mod)[2]) #> [1] 76.58952"},{"path":"https://rmk118.github.io/morphmat/articles/classification.html","id":"discriminant-analysis","dir":"Articles","previous_headings":"","what":"Discriminant Analysis","title":"Classification methods","text":"Talk drawbacks reasons unnecessary, mention instances might useful (stock assessment, applications related species)","code":""},{"path":"https://rmk118.github.io/morphmat/articles/classification.html","id":"post-classification-logistic-regression","dir":"Articles","previous_headings":"","what":"Post-classification logistic regression","title":"Classification methods","text":"method maturity classification identified, many additional choices need made using logistic regression obtain estimate SM50, particularly want obtain standard errors, confidence intervals, etc. Basic (GLM), GLMMs (lmer, nlme, glmmTMB), GAMs, sdmTMB, Bayesian methods, etc.","code":""},{"path":"https://rmk118.github.io/morphmat/articles/classification.html","id":"methods-to-obtain-confidence-intervals-for-sm50-value","dir":"Articles","previous_headings":"Post-classification logistic regression","what":"Methods to obtain confidence intervals for SM50 value","title":"Classification methods","text":"confint_L.R script Mainguy et al. (2024): Delta method, Fieller method, profile-likelihood, non-parametric bootstrapping, parametric bootstrapping, Monte Carlo, Bayesian R package qra: Fieller method R package twopartm: Fieller method R package drc (Ritz et al. 2015): Delta method, Fieller method. package can also fit 5/4/3/2-parameter logistic, log-logistic, Weibull, etc. models, incorporate weights, robust nls fitting, constrained optimization, customization options. also contains functions simulate data","code":""},{"path":"https://rmk118.github.io/morphmat/articles/simulations.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Simulating data","text":"Testing proposed model simulated data generated known underlying process important sometimes overlooked step ecological research (Lotterhos, Fitzpatrick, Blackmon 2022; Austin et al. 2006). fisheries science, simulation testing commonly used evaluate stock assessment population dynamic models assess robustness various types error (Deroba et al. 2015; Piner et al. 2011). applying size--maturity estimation procedures actual Jonah crab data, created multiple simulated data sets differing characteristics order determine domains applicability inference model. domain applicability refers types situations data sets model can reliably applied, domain inference defined processes conclusions can inferred model output (Lotterhos, Fitzpatrick, Blackmon 2022).","code":""},{"path":"https://rmk118.github.io/morphmat/articles/simulations.html","id":"basic-simulation-steps","dir":"Articles","previous_headings":"Introduction","what":"Basic simulation steps","title":"Simulating data","text":"Create normal distribution crabs given mean SD carapace width (CW) Use logistic distribution function known location scale parameters (.e., known L50 steepness logistic curve) find probability maturity individual Using given parameters slope intercept allometric equation, find predicted chela height (CH) individual based carapace width Add error representing individual variation allometric growth, assume log-normally distributed. Variance empirical size--maturity data often appears higher mature individuals, assuming multiplicative error structure, errors proportional x-axis variable. example, measurement error 4 mm less likely occur measuring crab carapace 30 mm length (13% error) crab 100-mm carapace (4% error). Use different combinations logistic allometric parameters determine model approach performs given varying possibilities true underlying biological process. also include several possibilities amount noise present data changing magnitude types errors. collection parameter sets include extreme combinations represent challenging “adversarial” data sets. simulations help determine domain applicability assessing model performance across range biologically realistic data sets capture variation imperfection found empirical data (Lotterhos, Fitzpatrick, Blackmon 2022).","code":""},{"path":"https://rmk118.github.io/morphmat/articles/simulations.html","id":"equations","dir":"Articles","previous_headings":"Introduction","what":"Equations","title":"Simulating data","text":"parameterization logistic equation use : f(x)=11+e−(x−)/bf(x)=\\frac{1}{1+e^{-(x-)/b}}  aa location parameter bb shape parameter. allometric growth equation \\begin{equation}Y=\\beta X^{\\alpha},\\end{equation} results linear plot log-transformed: log(Y)=β̃+αlog(X)\\log{(Y)}= \\tilde\\beta+\\alpha \\log{(X)}. , α\\alpha slope allometric line β\\beta intercept, β̃=log(β)\\tilde{\\beta}=\\log{(\\beta)}. Differences intercept allometry indicate differences proportionate size chela, irrespective carapace width. contrast, differences slope parameter represent differences relative size chela changes body size.","code":""},{"path":"https://rmk118.github.io/morphmat/articles/simulations.html","id":"a-note-on-the-error-distribution","dir":"Articles","previous_headings":"Introduction","what":"A note on the error distribution","title":"Simulating data","text":"assume errors added Step 4 normally distributed around regression lines obtained log-transforming raw CW CH values. words, assuming original data multiplicative log-normally distributed error: Y=βXαeε,ε∼N(0,σ2)Y=\\beta X^{\\alpha}e^{\\varepsilon}, \\quad \\varepsilon \\sim N(0,\\sigma^2)log(Y)=log(β)+αlog(X)+ε,ε∼N(0,σ2)\\log{(Y)}=\\log{(\\beta)}+ \\alpha\\log{(X)}+\\varepsilon, \\quad \\varepsilon \\sim N(0,\\sigma^2) question whether error structures assumed multiplicative additive fitting allometric models non-trivial often controversial (Packard 2009; Ballantyne 2013; Xiao et al. 2011). However, assumption multiplicative error often appropriate biological contexts case, simulating error based multiplicative structure generates artificial data sets adequately resemble empirical morphometric data sets interested (Xiao et al. 2011; Kerkhoff Enquist 2009). Alternative error distributions allometric models continue developed, future extensions research consider performance various size--maturity models applied simulated data different forms error (Echavarría-Heras et al. 2024).","code":""},{"path":"https://rmk118.github.io/morphmat/articles/simulations.html","id":"default-parameters","dir":"Articles","previous_headings":"","what":"Default parameters","title":"Simulating data","text":"Let’s visualize characteristics underlying data set (without error) called default parameters. default function generate random sample 1000 crabs mean carapace width 105 mm standard deviation 20 mm. true size maturity population 100 mm, slope parameter logistic equation 5. change allometric slope intercept parameters (α=1.2,β=0.15)(\\alpha=1.2, \\beta=0.15) upon reaching maturity, real data, actually able estimate size maturity based change morphometric ratios. SD error distribution also remains constant upon reaching maturity. Histogram carapace widths Distribution carapace widths maturity level Now finally plot two variables interest: Carapace width vs. chela height using default simulation parameters. Vertical grey lines represent size maturity used logistic equation (100 mm).","code":"default_sim <- fake_crustaceans()  default_sim_long <- default_sim %>%   rename(reg_x = x, reg_y = y) %>%   tidyr::pivot_longer(     cols = c(reg_x, reg_y, log_x, log_y),     names_sep = \"_\",     names_to = c(\"log\", \"var\")   ) %>%   mutate(log = if_else(log == \"log\", TRUE, FALSE)) #visualize crab size distribution ggplot() +   geom_histogram(data = default_sim, aes(x = x), bins = 35) +   labs(x = \"Carapace width (mm)\", y = \"Count\") + mytheme #Size by maturity stage histogram ggplot()+   geom_density(data=default_sim,                aes(x=x, group=mature, color=mature, fill=mature), alpha=0.5)+   mytheme +   labs(fill=NULL, color=NULL, x=\"Carapace width (mm)\", y=\"Density\")+   scale_color_manual(values=c(\"0\"=\"#368aab\",\"1\"=\"#993843\"),                      breaks=c(0,1),                      labels=c(\"0\"=\"Immature\", \"1\"=\"Mature\"))+   scale_fill_manual(values=c(\"0\"=\"#7bbcd5\",\"1\"=\"#CA6E78\"),                     breaks=c(0,1),                     labels=c(\"0\"=\"Immature\", \"1\"=\"Mature\")) temp_df <- default_sim_long %>% pivot_wider(names_from = var)  ggplot(data=temp_df, aes(x=x, y=y, color=mature))+   geom_point(alpha=0.5, size=1)+   facet_wrap( ~ log, scales = \"free\",                labeller = as_labeller(                 c(\"FALSE\" = \"Normal scale\", \"TRUE\" = \"Log scale\")))+   mytheme+   labs(x=\"Carapace width (mm)\", y=\"Chela height (mm)\", color=NULL)+   scale_color_manual(values=c(\"0\"=\"#7bbcd5\",\"1\"=\"#CA6E78\"),                      breaks=c(0,1),                      labels=c(\"0\"=\"Immature\", \"1\"=\"Mature\"))+   geom_vline(data = filter(temp_df,log==TRUE), aes(xintercept = log(100)),              lty=\"dashed\", color=\"grey\")+   geom_vline(data = filter(temp_df,log==FALSE), aes(xintercept = 100),              lty=\"dashed\", color=\"grey\")"},{"path":[]},{"path":"https://rmk118.github.io/morphmat/articles/simulations.html","id":"setup","dir":"Articles","previous_headings":"Changing parameters","what":"Setup","title":"Simulating data","text":"Now, adjust input values simulation function generate realistic data. change parameters three ways: slope logistic curve (sharpness transition maturity), allometric slope intercept, magnitude error data. Instead leaving slope parameter 5, try values 1 10. Values 10 initially tested, degree overlap mature immature groups far beyond likely observed nature. test five different options allometric growth changes upon reaching maturity, including default change. test three options magnitude errors. three options normal distribution extremely small SD (essentially error), SD equal 1/20 range x-axis variable, SD 1/15 range x-axis variable. Now create data frame possible combinations parameters create simulated data set combination.","code":"slope_options <- c(1:10) # Create data frame of allometric parameter vectors params_df <- tribble(   ~ name, ~ vec,   # No change in the slope or intercept - default   \"no_change\", c(1.2, 0.1, 1.2, 0.1),      # No change in the slope, slight increase in the intercept: the relative size   # of chela is the same with varying CWs within a maturity stage, but becomes   # proportionally larger upon reaching maturity.   \"parallel\", c(1.1, 0.1, 1.1, 0.15),      # Slight increase in the slope, no change in the intercept. The relative size   # of the chela does not become proportionately larger upon reaching maturity,   # but the rate at which chela size increases with increasing body size is   # higher for adult crabs compared to juveniles (goes from allometric to   # slightly hyperallometric).   \"allo_to_hyper\", c(1, 0.2, 1.1, 0.2),      # Moderate increase in the slope, moderate decrease in the intercept. The   # relative size of the chela becomes smaller upon reaching maturity, but the   # rate at which chela size increases with increasing body size is higher for   # adult crabs compared to juveniles (goes from allometric to hyperallometric).   \"crossing\", c(1, 0.25, 1.25, 0.08),      # Large increase in the slope, large decrease in the intercept. The relative   # size of the chela becomes much smaller upon reaching maturity, but the rate   # at which chela size increases with increasing body size is much higher for   # adult crabs compared to juveniles (goes from slightly hypoallometric to   # hyperallometric).   \"hypo_to_hyper\", c(0.9, 0.27, 1.75, 0.006) ) err_options_df <- tribble(   ~errs, ~err,   \"none\", 10^9,   \"low\",   20,   \"high\",  15) params_df <- expand_grid(params_df, slope_options)  err_params_df <- params_df %>% expand_grid(err_options_df)  fake_crustaceans <- err_params_df %>%   rowwise() %>%   mutate(output = list(     fake_crustaceans(       allo_params = vec,       slope = slope_options,       error_scale = err     )   )) %>%   unnest(output)"},{"path":"https://rmk118.github.io/morphmat/articles/simulations.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"Simulating data","text":"can see slope logistic distribution becomes less steep higher values aa. lower values representative species little intraspecific variation size maturity; true L50 100 mm, almost individuals become mature close 100 mm. contrast, high parameters represent species significant variation L50 individuals. Probability maturity function varying slope parameters. vertical dashed line represents size maturity/inflection point/location parameter, set 100 mm. Another way visualizing impact changing slope parameter ()() comparing density plots maturity CW. can see area intersection immature mature curves increases increasing values aa. right tail immature distribution extends much higher CW values =10a=10 compared =1a=1, left tail mature distribution extends much lower. Density plots illustrating smoothed distributions mature immature crabs range carapace widths four different values controlling shape underlying logistic function. Let’s visualize data default slope parameter 5 minimal error: Original scale Log scale Chela height (mm) vs. carapace width (mm) different allometric parameter sets Log chela height vs. log carapace width different allometric parameter sets Now add data points three different error levels: Original scale Log scale Chela height (mm) vs. carapace width (mm) different allometric parameter sets error options Log chela height vs. log carapace width different allometric parameter sets error options Keeping error levels low, allometric parameter set looks like change logistic slope parameter: Original scale Log scale Chela height vs. carapace width different allometric parameter sets logistic slope options Log chela height vs. log carapace width different allometric parameter sets logistic slope options","code":"pal <- c(\"#5D74A5\", \"#819AC2\", \"#A6C1DF\", \"#CAD9DC\", \"#ECEDCE\",          \"#F9E3B6\", \"#F1BD96\", \"#E39778\", \"#C57663\", \"#A8554E\")  # Logistic curves with different slope parameters ggplot()+   geom_line(data = fake_crustaceans,              aes(x = x, y = prob_mat, color = as.factor(slope_options)),              linewidth = 1)+   theme_light()+   geom_vline(xintercept = 100, lty = \"dashed\",              color = \"gray2\", linewidth = 0.5)+   scale_color_manual(values = pal)+   labs(x = \"Carapace width (mm)\", y = \"Probability of maturity\",        color = \"Slope parameter\")+   theme(     axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),     axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)),     text = element_text(size = 13)) #Size by maturity stage density plots fake_crustaceans %>%    filter(slope_options %in% c(1, 4, 7, 10)) %>%    ggplot()+   geom_density(aes(x = x, group = mature, color = mature, fill = mature),                 alpha = 0.5)+   mytheme +   facet_wrap(~slope_options, ncol = 1)+   labs(fill = NULL, color = NULL, x = \"Carapace width (mm)\", y = \"Density\")+   scale_color_manual(     values = c(\"0\" = \"#368aab\", \"1\" = \"#993843\"), breaks = c(0, 1),     labels = c(\"0\" = \"Immature\", \"1\" = \"Mature\")) +   scale_fill_manual(     values = c(\"0\" = \"#7bbcd5\", \"1\" = \"#CA6E78\"), breaks = c(0, 1),     labels = c(\"0\" = \"Immature\", \"1\" = \"Mature\")) # Lines only - original scale fake_crustaceans %>% filter(slope_options == 5, errs == \"none\") %>%  ggplot()+   geom_point(aes(x = x, y = y, color = mature), size = 1, alpha = 0.5)+   facet_wrap( ~ name)+   mytheme+   labs(x = \"Carapace width (mm)\", y = \"Chela height (mm)\", color = NULL)+   geom_vline(xintercept = 100, lty = \"dashed\", color = \"gray\")+   scale_color_manual(values = c(\"0\" = \"#7bbcd5\", \"1\" = \"#CA6E78\"),                      breaks = c(0, 1),                      labels = c(\"0\" = \"Immature\", \"1\" = \"Mature\")) # Lines only - log scale fake_crustaceans %>% filter(slope_options == 5, errs == \"none\") %>%  ggplot()+   geom_point(aes(x = log_x, y = log_y, color = mature), size = 1, alpha = 0.5)+   facet_wrap( ~ name)+   mytheme+   labs(x = \"Log carapace width (mm)\", y = \"Log chela height (mm)\", color = NULL)+   geom_vline(xintercept = log(100), lty = \"dashed\", color = \"gray\")+   scale_color_manual(values = c(\"0\" = \"#7bbcd5\", \"1\" = \"#CA6E78\"),                      breaks = c(0, 1),                      labels = c(\"0\" = \"Immature\", \"1\" = \"Mature\")) # Points and lines for one shape parameter and 3 error combos - original scale fake_crustaceans %>% filter(slope_options == 5) %>%   ggplot() +   geom_vline(xintercept = 100, lty = \"dashed\", color = \"gray\") +   geom_point(aes(x = x, y = y, color = mature, fill = mature),      alpha = 0.5, shape = 21, size = 1, stroke = 0) +   facet_grid(errs ~ name) +   mytheme +   labs(x = \"Carapace width (mm)\", y = \"Chela height (mm)\",        color = NULL, fill = NULL) +   scale_color_manual(     values = c(\"0\" = \"#368aab\", \"1\" = \"#993843\"), breaks = c(0, 1),     labels = c(\"0\" = \"Immature\", \"1\" = \"Mature\")) +   scale_fill_manual(     values = c(\"0\" = \"#7bbcd5\", \"1\" = \"#CA6E78\"), breaks = c(0, 1),     labels = c(\"0\" = \"Immature\", \"1\" = \"Mature\")) +   guides(lty = \"none\",           color = guide_legend(override.aes = list(size = 3, alpha = 1))) +   scale_x_continuous(breaks = c(100, 200)) # Points and lines for one shape parameter and 3 error combos - log scale fake_crustaceans %>% filter(slope_options == 5) %>%   ggplot() +   geom_vline(xintercept = log(100), lty = \"dashed\", color = \"gray\") +   geom_point(aes(x = log_x, y = log_y, color = mature, fill = mature),      alpha = 0.5, shape = 21, size = 1, stroke = 0) +   facet_grid(errs ~ name) +   mytheme +   labs(x = \"Log carapace width (mm)\", y = \"Log chela height (mm)\",        color = NULL, fill = NULL) +   scale_color_manual(     values = c(\"0\" = \"#368aab\", \"1\" = \"#993843\"), breaks = c(0, 1),     labels = c(\"0\" = \"Immature\", \"1\" = \"Mature\")) +   scale_fill_manual(     values = c(\"0\" = \"#7bbcd5\", \"1\" = \"#CA6E78\"), breaks = c(0, 1),     labels = c(\"0\" = \"Immature\", \"1\" = \"Mature\")) +   guides(lty = \"none\",           color = guide_legend(override.aes = list(size = 3, alpha = 1))) +   scale_x_continuous(breaks = c(3, 4, 5)) fake_crustaceans %>% filter(errs == \"low\", slope_options %in% c(1, 4, 7, 10)) %>%  ggplot()+   geom_vline(xintercept = 100, lty = \"dashed\", color = \"gray\")+   geom_point(aes(x = x, y = y, color = mature, fill = mature),              shape = 21, alpha = 0.5, size = 1, stroke = 0)+   facet_grid(slope_options ~ name)+   mytheme+   labs(x = \"Carapace width (mm)\", y = \"Chela height (mm)\",        color = NULL, fill = NULL)+   scale_color_manual(     values = c(\"0\" = \"#368aab\", \"1\" = \"#993843\"), breaks = c(0, 1),     labels = c(\"0\" = \"Immature\", \"1\" = \"Mature\")) +   scale_fill_manual(     values = c(\"0\" = \"#7bbcd5\", \"1\" = \"#CA6E78\"), breaks = c(0, 1),     labels = c(\"0\" = \"Immature\", \"1\" = \"Mature\")) +   guides(lty = \"none\",           fill = guide_legend(override.aes = list(size = 3, alpha = 1))) +   scale_x_continuous(breaks = c(100, 200)) fake_crustaceans %>% filter(errs == \"low\", slope_options %in% c(1, 4, 7, 10)) %>%  ggplot()+   geom_vline(xintercept = log(100), lty = \"dashed\", color = \"gray\")+   geom_point(aes(x = log_x, y = log_y, color = mature, fill = mature),              shape = 21, alpha = 0.5, size = 1, stroke = 0)+   facet_grid(slope_options ~ name)+   mytheme+   labs(x = \"Log carapace width (mm)\", y = \"Log chela height (mm)\",        color = NULL, fill = NULL)+   scale_color_manual(     values = c(\"0\" = \"#368aab\", \"1\" = \"#993843\"), breaks = c(0, 1),     labels = c(\"0\" = \"Immature\", \"1\" = \"Mature\")) +   scale_fill_manual(     values = c(\"0\" = \"#7bbcd5\", \"1\" = \"#CA6E78\"), breaks = c(0, 1),     labels = c(\"0\" = \"Immature\", \"1\" = \"Mature\")) +   guides(lty = \"none\",           fill = guide_legend(override.aes = list(size = 3, alpha = 1))) +   scale_x_continuous(breaks = c(3, 4, 5))"},{"path":"https://rmk118.github.io/morphmat/articles/two-line.html","id":"sec-twoA","dir":"Articles","previous_headings":"","what":"Standard","title":"Two-line models","text":"Two-line models differ broken-stick models intersection point line representing immature individuals line representing mature individuals necessarily optimal breakpoint value (value x-axis y-values switch predicted immature line predicted mature line). test two slightly different versions approach using code Crab_Maturity (Stevens, 2020). first version uses piecewise regression model find x-value/breakpoint gives lowest mean square error (MSE) iteratively testing observed x-value within range unknown maturity. second version, tested x-values evenly spaced points within unknown range, may equal actual observed values (like REGRANS). number interval points can user-defined, follow convention REGRANS simply test every integer value unknown range. SM50 defined optimal breakpoint point two lines actually intersect; .e. regression equations predict y-value. intersection point may lower previously determined breakpoint can even negative, often reasonable use breakpoint estimate SM50.","code":""},{"path":"https://rmk118.github.io/morphmat/articles/two-line.html","id":"two-line-stevens","dir":"Articles","previous_headings":"","what":"Two-line Stevens","title":"Two-line models","text":"","code":"set.seed(123) # set seed for reproducibility  fc <- fake_crustaceans(   error_scale = 17,   slope = 9,   L50 = 75,   n = 800,   allo_params = c(0.9, 0.25, 1.05, 0.2),   x_mean = 85 ) stevens_est <- two_line_stevens(fc, \"x\", \"y\", verbose = FALSE) stevens_est #>   breakpoint intersection  #>     88.01449    385.85516"},{"path":"https://rmk118.github.io/morphmat/articles/two-line.html","id":"two-line-with-logistic-transition","dir":"Articles","previous_headings":"","what":"Two-line with logistic transition","title":"Two-line models","text":"","code":"tll_est <- two_line_logistic(fc, \"x\", \"y\", verbose = FALSE) tll_est #>     SM50  #> 77.93902"},{"path":[]},{"path":"https://rmk118.github.io/morphmat/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ruby Krasnow. Author, maintainer.","code":""},{"path":"https://rmk118.github.io/morphmat/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Krasnow RM (2024). “morphmat: R package modeling size morphometric maturity.” https://github.com/rmk118/morphmat.","code":"@Misc{morphmat,   title = {morphmat: An R package for modeling size at morphometric maturity},   author = {Ruby M. Krasnow},   year = {2024},   url = {https://github.com/rmk118/morphmat}, }"},{"path":"https://rmk118.github.io/morphmat/index.html","id":"morphmat","dir":"","previous_headings":"","what":"Modeling Size at Maturity Using Morphometric Data","title":"Modeling Size at Maturity Using Morphometric Data","text":"compilation methods used estimate size (sexual) maturity based morphometric data, commonly applied crabs, lobsters, crustaceans. Approaches include modeling approaches based piecewise/segmented linear regression well numerous clustering-based methods.","code":""},{"path":"https://rmk118.github.io/morphmat/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Modeling Size at Maturity Using Morphometric Data","text":"can install development version morphmat GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"rmk118/morphmat\")"},{"path":"https://rmk118.github.io/morphmat/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Modeling Size at Maturity Using Morphometric Data","text":"basic example shows solve common problem:","code":"# library(morphmat) ## basic example code"},{"path":"https://rmk118.github.io/morphmat/reference/broken_stick.html","id":null,"dir":"Reference","previous_headings":"","what":"Broken-stick (segmented) approaches to estimating SM50 — broken_stick","title":"Broken-stick (segmented) approaches to estimating SM50 — broken_stick","text":"wrapper function allowing multiple methods broken-stick regression applied using standard format inputs. See vignette(\"broken-stick\") information.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/broken_stick.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Broken-stick (segmented) approaches to estimating SM50 — broken_stick","text":"","code":"broken_stick(   dat,   xvar,   yvar,   verbose = FALSE,   ci = 95,   lower = NULL,   upper = NULL,   trans = \"none\",   method = c(\"segmented\", \"chngpt\", \"regrans\", \"stevens\", \"all\") )"},{"path":"https://rmk118.github.io/morphmat/reference/broken_stick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Broken-stick (segmented) approaches to estimating SM50 — broken_stick","text":"dat data frame matrix containing data xvar Name column (integer double) measurements x-axis variable (e.g., carapace width). yvar Name column (integer double) measurements y-axis variable (e.g., claw height). verbose Boolean; standard error, confidence intervals, etc. returned, just estimate SM50? ci Integer; type confidence intervals return SM50, defaults 95%. lower Integer double; lower bound possible SM50 values. Must trans data. Defaults 20th percentile x-variable. upper Integer double; upper bound possible SM50 values. Must trans data. Defaults 80th percentile x-variable. trans Transformation applied data performing regression: \"none\", \"log\" (variables log-transformed), \"std\" (variables standardized = scaled centered). string provided, transformation performed (.e., default \"none\"). method Method use regression. single string string vector containing one c(\"segmented\", \"chngpt\", \"regrans\", \"stevens\"), \"\" return results methods comparison.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/broken_stick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Broken-stick (segmented) approaches to estimating SM50 — broken_stick","text":"verbose FALSE (default), estimate SM50 specified method(s). Otherwise, output list also includes standard error confidence intervals SM50 estimate well model object(s) /regression parameters lines broken-stick models.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/broken_stick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Broken-stick (segmented) approaches to estimating SM50 — broken_stick","text":"","code":"set.seed(12) fc <- fake_crustaceans(n=100, L50=100, allo_params=c(1, 0.2, 1.1, 0.2)) broken_stick(fc, xvar=\"x\", yvar=\"y\", method=c(\"segmented\", \"chngpt\")) #>    chngpt segmented  #>  89.44561  88.71463"},{"path":"https://rmk118.github.io/morphmat/reference/broken_stick_stevens.html","id":null,"dir":"Reference","previous_headings":"","what":"Broken-stick method from Bradley Stevens — broken_stick_stevens","title":"Broken-stick method from Bradley Stevens — broken_stick_stevens","text":"Broken-stick method Bradley Stevens","code":""},{"path":"https://rmk118.github.io/morphmat/reference/broken_stick_stevens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Broken-stick method from Bradley Stevens — broken_stick_stevens","text":"","code":"broken_stick_stevens(   dat,   xvar,   yvar,   lower = NULL,   upper = NULL,   verbose = FALSE )"},{"path":"https://rmk118.github.io/morphmat/reference/broken_stick_stevens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Broken-stick method from Bradley Stevens — broken_stick_stevens","text":"dat data frame matrix containing data xvar Name column (integer double) measurements x-axis variable (e.g., carapace width). yvar Name column (integer double) measurements y-axis variable (e.g., claw height). lower Integer double; lower bound possible SM50 values. Must scale data. Defaults 20th percentile x-variable. upper Integer double; upper bound possible SM50 values. Must scale data. Defaults 80th percentile x-variable. verbose additional output returned besides SM50 estimate?","code":""},{"path":"https://rmk118.github.io/morphmat/reference/broken_stick_stevens.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Broken-stick method from Bradley Stevens — broken_stick_stevens","text":"verbose FALSE (default), estimate SM50. Otherwise, output list also includes original data column representing line (immature mature) point assigned , immature amd mature slope intercept parameters, F p-values final piecewise model.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/broken_stick_stevens.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Broken-stick method from Bradley Stevens — broken_stick_stevens","text":"","code":"set.seed(12) fc <- fake_crustaceans(n = 100, L50 = 100, allo_params = c(1, 0.2, 1.1, 0.2)) broken_stick_stevens(fc, xvar = \"x\", yvar = \"y\", verbose = FALSE) #> [1] 91.10524"},{"path":"https://rmk118.github.io/morphmat/reference/fake_crustaceans.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate artificial data for simulation testing — fake_crustaceans","title":"Generate artificial data for simulation testing — fake_crustaceans","text":"Generates artificial sample morphometric data specified characteristics. Recommended use set.seed() running ensure reproducibility.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/fake_crustaceans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate artificial data for simulation testing — fake_crustaceans","text":"","code":"fake_crustaceans(   L50 = 100,   slope = 5,   n = 1000,   x_mean = 105,   x_sd = 20,   allo_params = c(1.2, 0.1, 1.2, 0.1),   error_scale = 20 )"},{"path":"https://rmk118.github.io/morphmat/reference/fake_crustaceans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate artificial data for simulation testing — fake_crustaceans","text":"L50 Integer double; desired true length 50% maturity scale x-axis/reference variable. Defaults 100 mm. slope Integer double; desired slope parameter logistic equation describing probability maturity given value x-axis/reference variable. Default 5. n Sample size simulated data set. Default 1000 individuals. x_mean Mean reference variable (e.g., carapace width). Default 105 mm. x_sd Standard deviation reference variable (e.g., carapace width). Default 20 mm. allo_params numeric vector length 4 containing parameters controlling allometric relationship x y variables changes maturity. contain immature slope parameter, immature intercept parameter, mature slope parameter, mature intercept parameter, order. error_scale Scaling error added simulated data","code":""},{"path":"https://rmk118.github.io/morphmat/reference/fake_crustaceans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate artificial data for simulation testing — fake_crustaceans","text":"data frame n rows. Columns : (1) x variable original scale, (2) probability maturity individual, (3) assigned maturity status, 1 0, (4) y variable original scale, (5) log-transformed x variable, (6) log-transformed y variable","code":""},{"path":"https://rmk118.github.io/morphmat/reference/fake_crustaceans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate artificial data for simulation testing — fake_crustaceans","text":"","code":"set.seed(123) fake_crustaceans(n=25) #>            x    prob_mat mature        y    log_x    log_y #> 1   93.79049 0.224104987      0 22.59484 4.541063 3.117722 #> 2  100.39645 0.519812132      1 25.51133 4.609127 3.239123 #> 3  136.17417 0.999279492      1 34.75503 4.913935 3.548324 #> 4  106.41017 0.782795735      1 27.50829 4.667301 3.314487 #> 5  107.58575 0.820118559      1 28.25854 4.678288 3.341396 #> 6  139.30130 0.999614375      1 37.15985 4.936639 3.615229 #> 7  114.21832 0.944990284      1 30.87054 4.738112 3.429802 #> 8   79.69878 0.016952453      0 18.47184 4.378254 2.916248 #> 9   91.26294 0.148373993      1 22.84396 4.513745 3.128687 #> 10  96.08676 0.313749488      0 24.30950 4.565252 3.190867 #> 11 129.48164 0.997258014      1 33.12834 4.863539 3.500389 #> 12 112.19628 0.919772153      1 27.44566 4.720250 3.312208 #> 13 113.01543 0.931059913      1 29.12296 4.727524 3.371527 #> 14 107.21365 0.808877185      1 26.86927 4.674824 3.290983 #> 15  93.88318 0.227344896      1 24.81147 4.542051 3.211306 #> 16 140.73826 0.999710670      1 39.63867 4.946902 3.679805 #> 17 114.95701 0.952184179      1 30.00144 4.744558 3.401245 #> 18  65.66766 0.001041066      0 14.57881 4.184607 2.679569 #> 19 119.02712 0.978234507      1 30.35877 4.779351 3.413086 #> 20  95.54417 0.290869341      0 25.27583 4.559589 3.229849 #> 21  83.64353 0.036569182      0 19.47490 4.426564 2.969126 #> 22 100.64050 0.531981364      0 26.96557 4.611555 3.294561 #> 23  84.47991 0.042941829      0 20.33126 4.436514 3.012160 #> 24  90.42218 0.128356952      0 21.87246 4.504490 3.085228 #> 25  92.49921 0.182402098      0 22.22107 4.527200 3.101041"},{"path":"https://rmk118.github.io/morphmat/reference/infl_pt.html","id":null,"dir":"Reference","previous_headings":"","what":"Maturity classification based on the minimum density of CH/CW ratios — infl_pt","title":"Maturity classification based on the minimum density of CH/CW ratios — infl_pt","text":"infl_pt() can used classify individuals immature mature clear ratio y-axis variable x-axis variable separates immature mature clusters. example, effective classification method transition maturity population Tanner crabs (Chionoecetes bairdi) evident increase log(claw height)/log(carapace width) ratio 0.2 0.2. infl_pt_fun() finds discriminating line creating kernel density estimate (visually similar smoothed histogram) y-var/x-var ratio points, finding local minimum separating two peaks representing maturity clusters.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/infl_pt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maturity classification based on the minimum density of CH/CW ratios — infl_pt","text":"","code":"infl_pt(dat, x, y, plot = FALSE)"},{"path":"https://rmk118.github.io/morphmat/reference/infl_pt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maturity classification based on the minimum density of CH/CW ratios — infl_pt","text":"dat optional data frame matrix containing data x Name column (integer double vector) containing measurements x-axis variable (e.g., carapace width). y Name column (integer double vector) containing measurements y-axis variable (e.g., claw height). plot Boolean; plot density curve identified minimum created?","code":""},{"path":"https://rmk118.github.io/morphmat/reference/infl_pt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maturity classification based on the minimum density of CH/CW ratios — infl_pt","text":"integer corresponding ratio (y/x) local minimum found. ratio serves discriminant line separating observations maturity status.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/infl_pt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maturity classification based on the minimum density of CH/CW ratios — infl_pt","text":"","code":"library(ggplot2) set.seed(12) x <- rnorm(100, mean = 2, sd = 3) y <- rnorm(100, mean = 15, sd = 3) z <- c(x, y) hist(z)  dat1 <- data.frame(xvar=rep(1, 200),yvar=z) infl_pt(dat1, \"xvar\", \"yvar\", TRUE)  #> [1] 8.052694 fc <- fake_crustaceans(n=100, allo_params=c(1, 0.2, 1.1, 0.2)) infl_pt(fc, \"x\", \"y\", TRUE)  #> [1] 0.2562708"},{"path":"https://rmk118.github.io/morphmat/reference/morphmat-package.html","id":null,"dir":"Reference","previous_headings":"","what":"morphmat: Modeling Size at Maturity Using Morphometric Data — morphmat-package","title":"morphmat: Modeling Size at Maturity Using Morphometric Data — morphmat-package","text":"compilation methods used estimate size (sexual) maturity based morphometric data, commonly applied crabs, lobsters, crustaceans. Approaches include modeling approaches based piecewise/segmentedlinear regression well numerous clustering-based methods.","code":""},{"path":[]},{"path":"https://rmk118.github.io/morphmat/reference/morphmat-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"morphmat: Modeling Size at Maturity Using Morphometric Data — morphmat-package","text":"Maintainer: Ruby Krasnow ruby.krasnow@maine.edu (ORCID)","code":""},{"path":"https://rmk118.github.io/morphmat/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://rmk118.github.io/morphmat/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://rmk118.github.io/morphmat/reference/regrans_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"REGRANS broken-stick regression method — regrans_fun","title":"REGRANS broken-stick regression method — regrans_fun","text":"REGRANS broken-stick regression method","code":""},{"path":"https://rmk118.github.io/morphmat/reference/regrans_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"REGRANS broken-stick regression method — regrans_fun","text":"","code":"regrans_fun(   dat,   xvar,   yvar,   lower = NULL,   upper = NULL,   verbose = FALSE,   n_tries = 100 )"},{"path":"https://rmk118.github.io/morphmat/reference/regrans_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"REGRANS broken-stick regression method — regrans_fun","text":"dat data frame matrix containing data xvar Name column (integer double) measurements x-axis variable (e.g., carapace width). yvar Name column (integer double) measurements y-axis variable (e.g., claw height). lower Integer double; lower bound possible SM50 values. Must scale data. Defaults 20th percentile x-variable. upper Integer double; upper bound possible SM50 values. Must scale data. Defaults 80th percentile x-variable. verbose Return breakpoints tested sum squares, estimated SM50? n_tries Number breakpoints test within unknown range.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/regrans_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"REGRANS broken-stick regression method — regrans_fun","text":"verbose = TRUE, data frame breakpoints tested sum squares. Otherwise, single value breakpoint lowest sum squares.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/regrans_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"REGRANS broken-stick regression method — regrans_fun","text":"","code":"set.seed(12) fc <- fake_crustaceans(n=100, L50=100, allo_params=c(1, 0.2, 1.1, 0.2)) regrans_fun(fc, \"x\", \"y\", verbose = FALSE) #> [1] 89.43822 head(regrans_fun(fc, \"x\", \"y\", verbose = TRUE), n=30) #>    changept   sum_sq #> 1  89.43822 1917.861 #> 2  89.74331 1919.376 #> 3  90.04840 1921.015 #> 4  90.35348 1922.750 #> 5  90.65857 1924.568 #> 6  90.96366 1926.505 #> 7  91.26874 1928.923 #> 8  91.57383 1931.428 #> 9  91.87892 1933.981 #> 10 92.18401 1936.569 #> 11 92.48909 1939.569 #> 12 92.79418 1943.374 #> 13 93.09927 1947.164 #> 14 93.40436 1950.928 #> 15 93.70944 1954.658 #> 16 94.01453 1958.346 #> 17 94.31962 1962.537 #> 18 94.62470 1966.590 #> 19 94.92979 1969.784 #> 20 95.23488 1973.135 #> 21 95.53997 1977.559 #> 22 95.84505 1982.278 #> 23 96.15014 1986.913 #> 24 96.45523 1991.515 #> 25 96.76032 1996.374 #> 26 97.06540 2001.115 #> 27 97.37049 2005.811 #> 28 97.67558 2011.004 #> 29 97.98066 2016.360 #> 30 98.28575 2021.730"},{"path":"https://rmk118.github.io/morphmat/reference/somerton_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Somerton method — somerton_fun","title":"Somerton method — somerton_fun","text":"Somerton method","code":""},{"path":"https://rmk118.github.io/morphmat/reference/somerton_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Somerton method — somerton_fun","text":"","code":"somerton_fun(   dat,   xvar,   yvar,   trans = \"none\",   lower = NULL,   upper = NULL,   max_iter = 50 )"},{"path":"https://rmk118.github.io/morphmat/reference/somerton_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Somerton method — somerton_fun","text":"dat data frame matrix containing data xvar Name column (integer double) measurements x - axis variable (e.g., carapace width). yvar Name column (integer double) measurements y-axis variable (e.g., claw height). trans Transformation applied data performing regression: \"none\", \"log\" (variables log-transformed), \"std\" (variables standardized = scaled centered). string provided, transformation performed (.e., default \"none\"). lower Integer double; lower bound possible SM50 values. Must trans data. Defaults 20th percentile x-variable. upper Integer double; upper bound possible SM50 values. Must trans data. Defaults 80th percentile x-variable. max_iter Maximum number iterations","code":""},{"path":"https://rmk118.github.io/morphmat/reference/somerton_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Somerton method — somerton_fun","text":"Output list also includes input data frame column specifying maturity group point assigned , vectors R-squared residual sum squares iteration, linear model objects corresponding maturity group.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/somerton_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Somerton method — somerton_fun","text":"","code":"set.seed(12) fc <- fake_crustaceans(n = 100, L50 = 100, allo_params = c(1, 0.2, 1.1, 0.2)) out_df <- somerton_fun(fc, xvar = \"x\", yvar = \"y\")[[1]] mod <- glm(data = out_df, pred_mat_num ~ x, family = binomial(link = \"logit\")) unname(-coef(mod)[1] / coef(mod)[2]) #> [1] 102.37"},{"path":"https://rmk118.github.io/morphmat/reference/two_line_logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Two-line logistic model — two_line_logistic","title":"Two-line logistic model — two_line_logistic","text":"Two-line logistic model","code":""},{"path":"https://rmk118.github.io/morphmat/reference/two_line_logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Two-line logistic model — two_line_logistic","text":"","code":"two_line_logistic(   dat,   xvar,   yvar,   imm_int = 1,   imm_slope = 0.2,   mat_int = 1,   mat_slope = 0.3,   SM50_start = NULL,   alpha_start = 9,   verbose = FALSE )"},{"path":"https://rmk118.github.io/morphmat/reference/two_line_logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Two-line logistic model — two_line_logistic","text":"dat data frame matrix containing data xvar Name column (integer double) measurements x-axis variable (e.g., carapace width). yvar Name column (integer double) measurements y-axis variable (e.g., claw height). imm_int Starting value immature intercept parameter fitting NLS model imm_slope tarting value immature slope parameter fitting NLS model mat_int Starting value mature intercept parameter fitting NLS model mat_slope Starting value mature slope parameter fitting NLS model SM50_start Starting value SM50 parameter fitting NLS model. provided, taken median x-variable alpha_start Starting value logistic slope parameter fitting NLS model verbose additional output returned besides SM50 estimate?","code":""},{"path":"https://rmk118.github.io/morphmat/reference/two_line_logistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Two-line logistic model — two_line_logistic","text":"verbose FALSE (default), estimate SM50. Otherwise, output NLS model object.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/two_line_logistic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Two-line logistic model — two_line_logistic","text":"","code":"set.seed(12) fc <- fake_crustaceans(n=100, L50=100, allo_params=c(1, 0.2, 1.1, 0.2)) two_line_logistic(fc, xvar=\"x\", yvar=\"y\", verbose = FALSE) #>     SM50  #> 104.7633"},{"path":"https://rmk118.github.io/morphmat/reference/two_line_stevens.html","id":null,"dir":"Reference","previous_headings":"","what":"Two-line methods from Bradley Stevens — two_line_stevens","title":"Two-line methods from Bradley Stevens — two_line_stevens","text":"Two-line methods Bradley Stevens","code":""},{"path":"https://rmk118.github.io/morphmat/reference/two_line_stevens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Two-line methods from Bradley Stevens — two_line_stevens","text":"","code":"two_line_stevens(   dat,   xvar,   yvar,   lower = NULL,   upper = NULL,   verbose = FALSE,   bps = \"even\",   num_bps = 100 )"},{"path":"https://rmk118.github.io/morphmat/reference/two_line_stevens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Two-line methods from Bradley Stevens — two_line_stevens","text":"dat data frame matrix containing data xvar Name column (integer double) measurements x-axis variable (e.g., carapace width). yvar Name column (integer double) measurements y-axis variable (e.g., claw height). lower Integer double; lower bound possible SM50 values. Must scale data. Defaults 20th percentile x-variable. upper Integer double; upper bound possible SM50 values. Must scale data. Defaults 80th percentile x-variable. verbose additional output returned besides SM50 estimate? bps values tested possible breakpoints restricted observed values x-variable (\"obs\"), specified number evenly-spaced values lower upper limits unknown region (\"even\", default) num_bps bps = \"even\", many values tested possible endpoints? Defaults 100, increased.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/two_line_stevens.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Two-line methods from Bradley Stevens — two_line_stevens","text":"verbose FALSE (default), two possible estimates SM50: breakpoint x-value marking transition immature mature points/lines, intersection point two lines cross. intersection value typically extremely unrealistic unless slopes lines drastically different. verbose TRUE, output list also includes original data column representing line (immature mature) point assigned , immature amd mature slope intercept parameters, intersection point two lines.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/two_line_stevens.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Two-line methods from Bradley Stevens — two_line_stevens","text":"","code":"#' set.seed(12) fc <- fake_crustaceans(n = 100, L50 = 100, allo_params = c(1, 0.2, 1.1, 0.2)) two_line_stevens(fc, xvar = \"x\", yvar = \"y\", verbose = FALSE) #>   breakpoint intersection  #>     104.1017    1561.0893"}]
