[{"path":"https://rmk118.github.io/morphmat/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 morphmat authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rmk118.github.io/morphmat/articles/broken-stick.html","id":"segmented-package","dir":"Articles","previous_headings":"","what":"segmented package","title":"Broken-stick methods","text":"powerful customizable method implementing broken-stick regression provided R package segmented, cited many papers using morphometric data estimate size maturity. Note segmented includes three different methods compute confidence intervals, details discussed Muggeo (2017). also possible estimate 95% CIs via bootstrap resampling, computation time required relatively high resulting estimates around values “delta” “gradient” methods included segmented package.  segmented package three built-methods get 95% confidence intervals break point: can also use ANOVA test compare segmented model single linear model: SM50 estimate simulated crab data R package segmented","code":"lm_orig <- lm(y ~ x, data = fc) lm_orig_seg <- segmented::segmented(lm_orig) plot(lm_orig_seg) #> Delta method: #>           Est. CI(95%).low CI(95%).up #> psi1.x 63.9545     57.1425    70.7665 #> Score method: #>           Est. CI(95%).low CI(95%).up #> psi1.x 63.9545     50.1308    67.6307 #> Gradient method: #>           Est. CI(95%).low CI(95%).up #> psi1.x 63.9545     53.7911    70.2144 anova(lm_orig, lm_orig_seg) #> Analysis of Variance Table #>  #> Model 1: y ~ x #> Model 2: y ~ x + U1.x + psi1.x #>   Res.Df    RSS Df Sum of Sq      F    Pr(>F)     #> 1    798 7866.2                                   #> 2    796 7629.8  2     236.4 12.332 5.318e-06 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://rmk118.github.io/morphmat/articles/broken-stick.html","id":"chngpt-package","dir":"Articles","previous_headings":"","what":"chngpt package","title":"Broken-stick methods","text":"Another R package capability segmented regression called chngpt. package differs slightly segmented types threshold models supported, optimization algorithms used parameter estimation, method(s) used calculate confidence intervals breakpoint (Fong et al. 2017). Broken-stick model package chngpt Log likelihood model various breakpoint values Bootstrap 95% confidence intervals segmented package, seems significantly underestimated SM50 compared true value 75, contained within bootstrap confidence intervals. alternative method calculating confidence intervals (“model-based”) produces similar results default bootstrap method. Adding starting breakpoint value 75 (.e., initializing search correct value) “chngpt.init” argument affect estimate, although result narrower confidence intervals: method EXTREMELY sensitive “lb.quantile” “ub.quantile” arguments, refer lower upper bounds search range change point estimate, respectively (function defaults 0.05 0.95). example, change lower quantile bound 0.33 upper 0.66, model return SM50 value closer true value 75 mm. estimates accuracy also change dramatically even slightly different variations data exact underlying structure. Results detailed investigations sensitivity modeling approach available forthcoming paper (Krasnow et al., prep). Although test options , chngpt package supports 14 different types two-phase (one threshold) models, well one three-phase model: see Fig. 1 Son Fong (2021). Importantly, also supports generalized linear models linear mixed models, can fit models utilizing family can passed glm include covariates random effects. Additional benefits package include several functions simulate data significant capability user-friendly customization. Options include providing grid changepoints iterate , using five different types bootstrap CIs numerous options type, providing bound slope parameters lines either side breakpoint, changing search/optimization algorithm parameter estimation meet needs data (e.g., “fastgrid2” fast might helpful large data sets). Using “chngpt.test” function run significance tests: interesting function returns slightly different breakpoint/threshold estimate chngptm() function called using default search region bounds (regardless set.seed set calling functions). Additionally, test statistic model less accurate breakpoint estimate much higher accurate model, yielding lower p-value.","code":"fit_chngpt <- chngptm(   formula.1 = y ~ 1,   formula.2 =  ~ x,   family = \"gaussian\",   data = fc,   type = \"segmented\",   var.type = \"default\",   weights = NULL ) summary(fit_chngpt) #> Change point model threshold.type:  segmented  #>  #> Coefficients: #>                    est Std. Error*     (lower    upper)     p.value* #> (Intercept) -0.9153689  0.62858364 -1.9643531 0.4996948 1.453262e-01 #> x            0.2005470  0.01357774  0.1688772 0.2221020 2.277627e-49 #> (x-chngpt)+  0.1425691  0.01659954  0.1134477 0.1785179 8.793325e-18 #>  #> Threshold: #>        est Std. Error     (lower     upper)  #>  63.954507   2.031396  58.890638  66.853710 summary(   chngptm(     formula.1 = y ~ 1,     formula.2 =  ~ x,     family = \"gaussian\",     data = fc,     type = \"segmented\",     var.type = \"model\", # note change from default to model     weights = NULL   ) )[[\"chngpt\"]] #>        est Std. Error     (lower     upper)  #>  63.954507   3.364602  55.814677  69.003917 summary(   chngptm(     formula.1 = y ~ 1,     formula.2 =  ~ x,     family = \"gaussian\",     data = fc,     type = \"segmented\",     chngpt.init = 75,     weights = NULL   ) )[[\"chngpt\"]] #>        est Std. Error     (lower     upper)  #>  63.954507   2.031396  58.890638  66.853710 summary(   chngptm(     formula.1 = y ~ 1,     formula.2 =  ~ x,     family = \"gaussian\",     data = fc,     type = \"segmented\",     var.type = \"model\",     lb.quantile = 0.33,     ub.quantile = 0.66,     weights = NULL   ) )[[\"chngpt\"]][1] #>      est  #> 76.00473 # Model with default upper and lower bounds chngpt.test(   formula.null = y ~ 1,   formula.chngpt = ~ x,   family = \"gaussian\",   data = fc,   type = \"segmented\" ) #>  #>  Maximum of Likelihood Ratio Statistics #>  #> data:  fc #> Maximal statistic = 24.358, threshold = 64.292, p-value < 2.2e-16 #> alternative hypothesis: two-sided  # Model with better upper and lower bounds to return # the true SM50 of 75 mm (0.6 and 0.3) chngpt.test(   formula.null = y ~ 1,   formula.chngpt = ~ x,   family = \"gaussian\",   data = fc,   type = \"segmented\",   lb.quantile = 0.3,   ub.quantile = 0.6 ) #>  #>  Maximum of Likelihood Ratio Statistics #>  #> data:  fc #> Maximal statistic = 13.909, threshold = 74.531, p-value = 0.00036 #> alternative hypothesis: two-sided"},{"path":"https://rmk118.github.io/morphmat/articles/broken-stick.html","id":"regrans","dir":"Articles","previous_headings":"","what":"REGRANS","title":"Broken-stick methods","text":"also test broken-stick method manually coding algorithm identify appropriate breakpoint. following code conceptually similar R version REGRANS, initially written 1993 programming language BASIC (Pezzuto 1993). can optionally define lower upper limits changepoints want function test; otherwise, tests user-defined number evenly-spaced values (default = 100) ranging 0.2 quantile 0.8 quantile x-axis variable.  previous broken-stick methods, REGRANS tends underestimate SM50 model estimates highly sensitive values upper lower bounds region considered plausible contain SM50 value.","code":"regrans_est <- regrans(fc, \"x\", \"y\", verbose = FALSE) regrans_est #> [1] 67.67091"},{"path":"https://rmk118.github.io/morphmat/articles/broken-stick.html","id":"crab_maturity-type-a-broken-stick-stevens","dir":"Articles","previous_headings":"","what":"Crab_Maturity Type A (Broken-stick Stevens)","title":"Broken-stick methods","text":"third algorithm using segmented regression estimate SM50 written Dr. Bradley Stevens University Maryland Eastern Shore. code part Crab_Maturity program available GitHub. several different methods included within Crab_Maturity; segmented regression approach included differs segmented REGRANS methods possible SM50 values restricted values x-variable present data set. See Olsen Stevens (2020) example real-world application.","code":"stevens_est <- broken_stick_stevens(fc, \"x\", \"y\", verbose = FALSE) stevens_est #> [1] 68.33387"},{"path":[]},{"path":"https://rmk118.github.io/morphmat/articles/classification.html","id":"clustering-methods","dir":"Articles","previous_headings":"","what":"Clustering methods","title":"Classification methods","text":"Innumerable clustering methods implemented existing R packages. using simulation testing evaluate relative performance common clustering methods used separate immature mature crustaceans based morphometric data. Functions included simulation testing include hclust() kmeans() base R stats package; factoextra::hkmeans(); cluster::PAM(); mclust::Mclust(); dbscan(), hdbscan(), OPTICS() dbscan package. Somerton method clustering method widely used estimating size maturity based allometric growth crustacean body parts, originally written FORTRAN (Somerton 1980). morphmat contain code implement Somerton method R, largely following structure code written Dr. Bradley Stevens.","code":""},{"path":"https://rmk118.github.io/morphmat/articles/classification.html","id":"somerton-method","dir":"Articles","previous_headings":"Clustering methods","what":"Somerton method","title":"Classification methods","text":"","code":"out_df <- somerton(fc, xvar = \"x\", yvar = \"y\")[[1]] mod <- glm(data = out_df,            pred_mat_num ~ x,            family = binomial(link = \"logit\")) unname(-coef(mod)[1] / coef(mod)[2]) #> [1] 77.70282"},{"path":[]},{"path":"https://rmk118.github.io/morphmat/articles/classification.html","id":"inflection-point-discriminant-method","dir":"Articles","previous_headings":"Other classification methods","what":"Inflection point discriminant method","title":"Classification methods","text":"Simulated data addition linear discriminant function identified via inflection point method line can used classify point immature mature, enabling logistic regression applied estimate SM50:","code":"disc <- infl_pt(fc, \"x\", \"y\", plot = TRUE) ggplot() +   geom_point(data = fc, aes(x, y), alpha = 0.4) +   labs(x = \"CW (mm)\", y = \"CH (mm)\", ) +   mytheme + geom_abline(slope = disc, color = \"red\", linewidth = 1.3) fc_infl_pt <- fc %>% mutate(pred_mat = as.factor(if_else(y / x > disc, 1, 0)),                             correct = if_else(pred_mat == mature, TRUE, FALSE)) if (rlang::is_installed(\"patchwork\")) {   (ggplot() +       geom_point(data = fc_infl_pt, aes(x, y, color = mature), alpha = 0.4) +       labs(x = \"CW (mm)\", y = \"CH (mm)\", title = \"True maturity\") +       mytheme) +     (ggplot() +         geom_point(data = fc_infl_pt, aes(x, y, color = pred_mat), alpha = 0.4) +         labs(x = \"CW (mm)\", y = \"CH (mm)\", title = \"Predicted maturity\") +         mytheme) } else {   ggplot() +     geom_point(data = fc_infl_pt, aes(x, y, color = mature), alpha = 0.4) +     labs(x = \"CW (mm)\", y = \"CH (mm)\", title = \"True maturity\") +     mytheme      ggplot() +     geom_point(data = fc_infl_pt, aes(x, y, color = pred_mat), alpha = 0.4) +     labs(x = \"CW (mm)\", y = \"CH (mm)\", title = \"Predicted maturity\") +     mytheme }"},{"path":"https://rmk118.github.io/morphmat/articles/classification.html","id":"post-classification-logistic-regression","dir":"Articles","previous_headings":"","what":"Post-classification logistic regression","title":"Classification methods","text":"method maturity classification identified, many additional choices need made using logistic regression obtain estimate SM50, particularly want obtain standard errors, confidence intervals, etc. aspect analysis determining size maturity non-crustacean fisheries. common way fit generalized linear model using binomial family logit link, taking ratio estimated coefficients find SM50 value. example, using classifications produced Somerton method: See vignette(\"logistic\") details options methods obtain SM50 values confidence intervals data set includes maturity labels.","code":"infl_pt_mod <- glm(pred_mat ~ x,                    family = binomial(link = \"logit\"),                    data = fc_infl_pt)  # SM50 = -A/B unname(-coef(infl_pt_mod)[1] / coef(infl_pt_mod)[2]) #> [1] 74.85785"},{"path":"https://rmk118.github.io/morphmat/articles/logistic.html","id":"post-classification-logistic-regression-options","dir":"Articles","previous_headings":"","what":"Post-classification logistic regression options","title":"Post-classification logistic regression","text":"Beyond familiar stats::glm, many packages can used model relationship size maturity status, allowing incorporation random effects, temporal spatial structuring, additional complexities. include popular packages fitting generalized linear mixed models (GLMMs) generalized additive (mixed) models (GAMMs) lmer, nlme, mgcv, glmmTMB, sdmTMB. logit links common binomial models like , testing alternative link functions—particularly probit complementary log-log (“cloglog”) links—may important ensuring reliable parameter estimates (Mainguy et al. 2024). Also see Roa et al. (1999). Helpful vignette: https://cran.r-project.org/web/packages/qra/vignettes/timeMortality.html","code":""},{"path":"https://rmk118.github.io/morphmat/articles/logistic.html","id":"methods-to-obtain-confidence-intervals-for-sm50-value","dir":"Articles","previous_headings":"Post-classification logistic regression options","what":"Methods to obtain confidence intervals for SM50 value","title":"Post-classification logistic regression","text":"confint_L.R script Mainguy et al. (2024): Delta method, Fieller method, profile-likelihood, non-parametric bootstrapping, parametric bootstrapping, Monte Carlo, Bayesian R package qra: Fieller method, Delta method (Maindonald 2021) R package drc (Ritz et al. 2015): Delta method. package can also fit 5/4/3/2-parameter logistic, log-logistic, Weibull, etc. models, incorporate weights, robust nls fitting, constrained optimization, customization options. also contains functions simulate data 4: R package DRDA (Malyutina, Tang, Pessia 2023) functions used (tested) include twopartm::FiellerRatio() tidydelta::tidydelta().","code":""},{"path":"https://rmk118.github.io/morphmat/articles/logistic.html","id":"standard-statsglm","dir":"Articles","previous_headings":"Post-classification logistic regression options > Methods to obtain confidence intervals for SM50 value","what":"Standard stats::glm","title":"Post-classification logistic regression","text":"","code":"example_glm <- glm(data = fc_mclust,                    pred_maturity_num ~ x,                    family = binomial(link = \"logit\"))  broom::tidy(example_glm, conf.int = TRUE) #> # A tibble: 2 × 7 #>   term        estimate std.error statistic  p.value conf.low conf.high #>   <chr>          <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl> #> 1 (Intercept)   -7.76    0.615       -12.6 1.54e-36  -9.01      -6.60  #> 2 x              0.104   0.00772      13.4 4.63e-41   0.0891     0.119  broom::glance(example_glm) %>%   dplyr::select(-c(null.deviance, df.null)) %>%   mutate(across(where(is.double), ~ round(.x, digits = 2))) #> # A tibble: 1 × 6 #>   logLik   AIC   BIC deviance df.residual  nobs #>    <dbl> <dbl> <dbl>    <dbl>       <int> <int> #> 1  -352.  708.  718.     704.         798   800"},{"path":"https://rmk118.github.io/morphmat/articles/logistic.html","id":"drc-package","dir":"Articles","previous_headings":"Post-classification logistic regression options > Methods to obtain confidence intervals for SM50 value","what":"drc package","title":"Post-classification logistic regression","text":"Custom plot example:","code":"testdrm <- drc::drm(pred_maturity_num ~ x,                data = fc_mclust,                fct = LL.2(),                type = \"binomial\") testdrm #>  #> A 'drc' model. #>  #> Call: #> drc::drm(formula = pred_maturity_num ~ x, data = fc_mclust, fct = LL.2(),     type = \"binomial\") #>  #> Coefficients: #> b:(Intercept)  e:(Intercept)   #>        -7.996         74.001 summary(testdrm) #>  #> Model fitted: Log-logistic (ED50 as parameter) with lower limit at 0 and upper limit at 1 (2 parms) #>  #> Parameter estimates: #>  #>               Estimate Std. Error t-value   p-value     #> b:(Intercept) -7.99575    0.59870 -13.355 < 2.2e-16 *** #> e:(Intercept) 74.00087    0.93113  79.475 < 2.2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 confint(testdrm, \"e\") #>                 2.5 %   97.5 % #> e:(Intercept) 72.1759 75.82584  estfun.drc <- drc::estfun.drc bread.drc <- drc::bread.drc  # use lmtest and sandwich packages to obtain robust standard errors lmtest::coeftest(testdrm, vcov = sandwich)  #>  #> t test of coefficients: #>  #>               Estimate Std. Error t value  Pr(>|t|)     #> b:(Intercept) -7.99575    0.60852 -13.140 < 2.2e-16 *** #> e:(Intercept) 74.00087    0.96722  76.508 < 2.2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 drc::ED(testdrm, c(50), \"delta\") #>  #> Estimated effective doses #>  #>        Estimate Std. Error    Lower    Upper #> e:1:50 74.00087    0.93113 72.17590 75.82584  plot(testdrm) # built-in plotting method sm50_est <- coef(testdrm)[2] low_ci <- confint(testdrm, \"e\")[1] hi_ci <- confint(testdrm, \"e\")[2]  ggplot() +   geom_point(aes(x = fc_mclust$x, y = fc_mclust$pred_maturity_num),              shape = 1, size = 1) +   geom_line(aes(x = fc_mclust$x, y = predict(testdrm))) +   geom_vline(xintercept = sm50_est) +   geom_rect(aes(xmin = low_ci, xmax = hi_ci,     ymin = -Inf, ymax = Inf, fill = \"95% CI\"), alpha = 0.5) +   labs(y = \"Probability of maturity\", x = \"Carapace width (mm)\", fill = NULL) +   mytheme +   theme(legend.position = \"inside\", legend.position.inside = c(0.75, 0.25))"},{"path":"https://rmk118.github.io/morphmat/articles/logistic.html","id":"qra-package","dir":"Articles","previous_headings":"Post-classification logistic regression options > Methods to obtain confidence intervals for SM50 value","what":"qra package","title":"Post-classification logistic regression","text":"See qra::fieller() details usage outputs. Custom plot example:","code":"qra::fieller(   0.5,   b = coef(example_glm),   vv = vcov(example_glm),   type = \"Fieller\" ) #>        est        var        lwr        upr          g  #> 74.8902398  0.8919419 72.9346488 76.6805775  0.0213313  qra::fieller(   0.5,   b = coef(example_glm),   vv = vcov(example_glm),   type = \"Delta\" # probably OK because of low g value ) #>        est        var        lwr        upr          g  #> 74.8902398  0.8919419 73.0391634 76.7413162  0.0000000 qra_est <- qra::fieller(   0.5,   b = coef(example_glm),   vv = vcov(example_glm),   type = \"Fieller\" )  sm50_est <- qra_est[1] low_ci <- qra_est[3] hi_ci <- qra_est[4]  ggplot() +   geom_point(aes(x = fc_mclust$x, y = fc_mclust$pred_maturity_num),              shape = 1, size = 1) +   geom_line(aes(x = fc_mclust$x, y = predict(example_glm, type = \"response\"))) +   geom_vline(xintercept = sm50_est) +   geom_rect(aes(xmin = low_ci, xmax = hi_ci,     ymin = -Inf, ymax = Inf, fill = \"95% CI\"), alpha = 0.5) +   labs(y = \"Probability of maturity\", x = \"Carapace width (mm)\", fill = NULL) +   mytheme +   theme(legend.position = \"inside\", legend.position.inside = c(0.75, 0.25))"},{"path":"https://rmk118.github.io/morphmat/articles/logistic.html","id":"drda-package","dir":"Articles","previous_headings":"Post-classification logistic regression options > Methods to obtain confidence intervals for SM50 value","what":"DRDA package","title":"Post-classification logistic regression","text":"Custom plot example:","code":"fit_l2 <- drda(pred_maturity_num ~ x,                data = fc_mclust,                mean_function = \"logistic2\") fit_l4 <- drda(pred_maturity_num ~ x,                data = fc_mclust,                mean_function = \"logistic4\")  anova(fit_l2, fit_l4) #> Analysis of Deviance Table #>  #> Model 1: a #> Model 2: 1 / (1 + exp(-e * (x - p))) #> Model 3: a + d / (1 + exp(-e * (x - p))) #> Model 4: a + d / (1 + n * exp(-e * (x - p)))^(1 / n) (Full) #>  #> Model 2 is the best model according to the Akaike Information Criterion. #>  #>         Resid. Df Resid. Dev Df     AIC     BIC Deviance    LRT Pr(>Chi)     #> Model 1       799     184.04    1098.73 1108.10                              #> Model 2       798     114.59  1  721.74  735.79  -69.443 378.99   <2e-16 *** #> Model 3       796     114.50  2  725.11  748.53   -0.091   0.63   0.7290     #> Model 4       795     114.39  1  726.33  754.44   -0.111   0.78   0.3783     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 anova(fit_l2) #> Analysis of Deviance Table #>  #> Model 1: a #> Model 2: 1 / (1 + exp(-e * (x - p))) (Fit) #> Model 3: a + d / (1 + n * exp(-e * (x - p)))^(1 / n) (Full) #>  #> Model 2 is the best model according to the Akaike Information Criterion. #>  #>         Resid. Df Resid. Dev Df     AIC     BIC Deviance    LRT Pr(>Chi)     #> Model 1       799     184.04  1 1098.73 1108.10                              #> Model 2       798     114.59  2  721.74  735.79  -69.443 378.99   <2e-16 *** #> Model 3       795     114.39  5  726.33  754.44   -0.202   1.41   0.7036     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 summary(fit_l2) #>  #> Call: drda(formula = pred_maturity_num ~ x, data = fc_mclust, mean_function = \"logistic2\") #>  #> Pearson Residuals: #>     Min       1Q   Median       3Q      Max   #> -2.5524  -0.5319   0.1131   0.5676   2.4444   #>  #> Parameters: #>                   Estimate Std. Error Lower .95 Upper .95 #> Minimum             0.0000         NA        NA        NA #> Height              1.0000         NA        NA        NA #> Growth rate         0.1063   0.009468    0.0877     0.125 #> Midpoint at        75.0850   0.802979   73.5112    76.659 #> Residual std err.   0.3790   0.009492    0.3603     0.398 #>  #> Residual standard error on 798 degrees of freedom #>  #> Log-likelihood: -357.87 #> AIC: 721.74 #> BIC: 735.79 #>  #> Optimization algorithm converged in 291 iterations  plot(fit_l2) # built-in plotting method sum_l2 <- summary(fit_l2)[[\"param\"]][4,]  sm50_est <- sum_l2[1] low_ci <- sum_l2[3] hi_ci <- sum_l2[4]  ggplot() +   geom_point(aes(x = fc_mclust$x, y = fc_mclust$pred_maturity_num),              shape = 1, size = 1) +   geom_line(aes(x = fc_mclust$x, y = predict(fit_l2))) +   geom_vline(xintercept = sm50_est) +   geom_rect(aes(xmin = low_ci, xmax = hi_ci,     ymin = -Inf, ymax = Inf, fill = \"95% CI\"), alpha = 0.5) +   labs(y = \"Probability of maturity\", x = \"Carapace width (mm)\", fill = NULL) +   mytheme +   theme(legend.position = \"inside\", legend.position.inside = c(0.75, 0.25))"},{"path":[]},{"path":[]},{"path":"https://rmk118.github.io/morphmat/articles/morphmat.html","id":"original-scale","dir":"Articles","previous_headings":"Plot your data","what":"Original scale","title":"morphmat","text":"","code":"ggplot() +   geom_point(data = fc, aes(x, y), alpha = 0.4) +   labs(x = \"Carapace width (mm)\", y = \"Claw height (mm)\", ) +   mytheme"},{"path":"https://rmk118.github.io/morphmat/articles/morphmat.html","id":"log-log-scale","dir":"Articles","previous_headings":"Plot your data","what":"Log-log scale","title":"morphmat","text":"","code":"ggplot() +   geom_point(data = fc, aes(log_x, log_y), alpha = 0.4) +   labs(x = \"Log carapace width (mm)\", y = \"Log claw height (mm)\", ) +   mytheme"},{"path":[]},{"path":"https://rmk118.github.io/morphmat/articles/morphmat.html","id":"mclust-for-classification","dir":"Articles","previous_headings":"Suggested method","what":"mclust for classification","title":"morphmat","text":"","code":"clust_dat <- cbind(fc$x, fc$y) mclust_class <- mclust::Mclust(data = clust_dat,                                G = 2,                                modelNames = \"EVV\")  broom::glance(mclust_class) %>% select(-hypvol) #> # A tibble: 1 × 6 #>   model     G     BIC logLik    df  nobs #>   <chr> <int>   <dbl>  <dbl> <dbl> <int> #> 1 EVV       2 -10582. -5258.    10   800  fc_mclust <- fc %>%   rename(true_maturity = mature) %>%   mutate(pred_maturity = mclust_class$classification)   mature_label <- slice_max(fc_mclust, x) %>% pull(pred_maturity)  fc_mclust <- fc_mclust %>%   mutate(     pred_maturity = if_else(pred_maturity == mature_label,                             as.factor(1), as.factor(0)),     pred_maturity_num = if_else(pred_maturity == 1,                                 as.numeric(1), as.numeric(0))   ) %>%   mutate(uncertainty = mclust_class$uncertainty)"},{"path":"https://rmk118.github.io/morphmat/articles/morphmat.html","id":"compare-the-mature-and-immature-groups","dir":"Articles","previous_headings":"Suggested method","what":"Compare the mature and immature groups","title":"morphmat","text":"Predicted clusters using mixture-based clustering.","code":"fc_mclust %>%   mutate(mature = if_else(pred_maturity == 0, \"Immature\", \"Mature\")) %>%   tbl_summary(include = c(x, y),     by = mature,     type = all_continuous() ~ \"continuous2\",     label = list(x ~ \"Carapace width (mm)\", y ~ \"Chela height (mm)\"),     statistic = list(       all_continuous() ~ c(\"{mean} (\\U00B1{sd})\",         \"{min}-{max}\"))) %>%   add_p() %>%   modify_header(label ~ \"\",     all_stat_cols() ~ \"**{level}**<br>N = {n} ({style_percent(p)}%)\") %>%   add_stat_label(label = all_continuous() ~ c(\"Mean (\\U00B1SD)\", \"Min - Max\")) #> The following errors were returned during `modify_header()`: #> ✖ For variable `x` (`mature`) and \"p.value\" statistic: The package \"cardx\" (>= #>   0.2.2) is required. #> ✖ For variable `y` (`mature`) and \"p.value\" statistic: The package \"cardx\" (>= #>   0.2.2) is required. ggplot(data = fc_mclust) +   mytheme +   geom_point(aes(x, y, color = pred_maturity, fill = pred_maturity),              alpha = 0.5, shape = 21) +   scale_color_manual(values = c(\"0\" = \"#368aab\", \"1\" = \"#993843\"),                      breaks = c(0, 1), labels = c(\"0\" = \"Immature\", \"1\" = \"Mature\")) +   scale_fill_manual(values = c(\"0\" = \"#7bbcd5\", \"1\" = \"#CA6E78\"),                     breaks = c(0, 1), labels = c(\"0\" = \"Immature\", \"1\" = \"Mature\")) +   labs(x = \"Carapace width (mm)\", y = \"Chela height (mm)\",        color = \"Predicted clusters\", fill = \"Predicted clusters\")"},{"path":"https://rmk118.github.io/morphmat/articles/morphmat.html","id":"glm-for-obtaining-sm50-value","dir":"Articles","previous_headings":"Suggested method","what":"GLM for obtaining SM50 value","title":"morphmat","text":"basic way obtain SM50 estimate allometric data clustered mature immature groups:","code":"mod <- glm(data = fc_mclust,            pred_maturity_num ~ x,            family = binomial(link = \"logit\")) unname(-coef(mod)[1] / coef(mod)[2]) # SM50 = -A/B #> [1] 74.89024"},{"path":"https://rmk118.github.io/morphmat/articles/morphmat.html","id":"comparing-clustering-approaches","dir":"Articles","previous_headings":"","what":"Comparing clustering approaches","title":"morphmat","text":"","code":"# Here there will be a function where you can compare the results of many # different clustering methods: mclust, Somerton, infl_pt, kmeans, & hclust  # cluster_mods(fc, xvar = \"x\", yvar = \"y\", method = c(\"all\"))"},{"path":"https://rmk118.github.io/morphmat/articles/morphmat.html","id":"comparison-with-piecewise-regression-models","dir":"Articles","previous_headings":"","what":"Comparison with piecewise regression models","title":"morphmat","text":"","code":"piecewise_mods(fc, xvar = \"x\", yvar = \"y\", method = c(\"all\")) #>                chngpt             segmented               REGRANS  #>              67.68312              63.95451              67.67091  #>               Stevens   Two_line.breakpoint Two_line.intersection  #>              68.33387              75.43651              56.76587  piecewise_mods(fc, xvar = \"x\", yvar = \"y\", method = c(\"all\"),                    log = TRUE) %>% exp() #>                chngpt             segmented               REGRANS  #>              67.68312              62.82577              67.67091  #>               Stevens   Two_line.breakpoint Two_line.intersection  #>              68.33387              75.21507              50.25602"},{"path":"https://rmk118.github.io/morphmat/articles/simulations.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Simulating data","text":"Testing proposed model simulated data generated known underlying process important sometimes overlooked step ecological research (Lotterhos, Fitzpatrick, Blackmon 2022; Austin et al. 2006). fisheries science, simulation testing commonly used evaluate stock assessment population dynamic models assess robustness various types error (Deroba et al. 2015; Piner et al. 2011). applying size--maturity estimation procedures actual Jonah crab data, created multiple simulated data sets differing characteristics order determine domains applicability inference model. domain applicability refers types situations data sets model can reliably applied, domain inference defined processes conclusions can inferred model output (Lotterhos, Fitzpatrick, Blackmon 2022).","code":""},{"path":"https://rmk118.github.io/morphmat/articles/simulations.html","id":"basic-simulation-steps","dir":"Articles","previous_headings":"Introduction","what":"Basic simulation steps","title":"Simulating data","text":"Create normal distribution crabs given mean SD carapace width (CW) Use logistic distribution function known location scale parameters (.e., known L50 steepness logistic curve) find probability maturity individual Using given parameters slope intercept allometric equation, find predicted chela height (CH) individual based carapace width Add error representing individual variation allometric growth, assume log-normally distributed. Variance empirical size--maturity data often appears higher mature individuals, assuming multiplicative error structure, errors proportional x-axis variable. example, measurement error 4 mm less likely occur measuring crab carapace 30 mm length (13% error) crab 100-mm carapace (4% error). Use different combinations logistic allometric parameters determine model approach performs given varying possibilities true underlying biological process. also include several possibilities amount noise present data changing magnitude types errors. collection parameter sets include extreme combinations represent challenging “adversarial” data sets. simulations help determine domain applicability assessing model performance across range biologically realistic data sets capture variation imperfection found empirical data (Lotterhos, Fitzpatrick, Blackmon 2022).","code":""},{"path":"https://rmk118.github.io/morphmat/articles/simulations.html","id":"equations","dir":"Articles","previous_headings":"Introduction","what":"Equations","title":"Simulating data","text":"parameterization logistic equation use : f(x)=\\frac{1}{1+e^{-(x-)/b}}  location parameter b shape parameter. allometric growth equation Y=\\beta X^{\\alpha} results linear plot log-transformed: \\log{(Y)}= \\tilde{\\beta}+\\alpha\\log{(X)}. , \\alpha slope allometric line \\beta intercept, \\tilde{\\beta}=\\log{(\\beta)}. Differences intercept allometry indicate differences proportionate size chela, irrespective carapace width. contrast, differences slope parameter represent differences relative size chela changes body size.","code":""},{"path":"https://rmk118.github.io/morphmat/articles/simulations.html","id":"a-note-on-the-error-distribution","dir":"Articles","previous_headings":"Introduction","what":"A note on the error distribution","title":"Simulating data","text":"assume errors added Step 4 normally distributed around regression lines obtained log-transforming raw CW CH values. words, assuming original data multiplicative log-normally distributed error: Y=\\beta X^{\\alpha}e^{\\varepsilon}, \\quad \\varepsilon \\sim N(0,\\sigma^2) \\log{(Y)}=\\log{(\\beta)}+ \\alpha\\log{(X)}+\\varepsilon, \\quad \\varepsilon \\sim N(0,\\sigma^2) question whether error structures assumed multiplicative additive fitting allometric models non-trivial often controversial (Packard 2009; Ballantyne 2013; Xiao et al. 2011). However, assumption multiplicative error often appropriate biological contexts case, simulating error based multiplicative structure generates artificial data sets adequately resemble empirical morphometric data sets interested (Xiao et al. 2011; Kerkhoff Enquist 2009). Alternative error distributions allometric models continue developed, future extensions research consider performance various size--maturity models applied simulated data different forms error (Echavarría-Heras et al. 2024).","code":""},{"path":"https://rmk118.github.io/morphmat/articles/simulations.html","id":"default-parameters","dir":"Articles","previous_headings":"","what":"Default parameters","title":"Simulating data","text":"Let’s visualize characteristics underlying data set (without error) called default parameters. default function generate random sample 1000 crabs mean carapace width 105 mm standard deviation 20 mm. true size maturity population 100 mm, slope parameter logistic equation 5. change allometric slope intercept parameters (\\alpha=1.2, \\beta=0.15) upon reaching maturity, real data, actually able estimate size maturity based change morphometric ratios. SD error distribution also remains constant upon reaching maturity. Histogram carapace widths Distribution carapace widths maturity level Now finally plot two variables interest: Carapace width vs. chela height using default simulation parameters. Vertical grey lines represent size maturity used logistic equation (100 mm).","code":"default_sim <- fake_crustaceans()  default_sim_long <- default_sim %>%   rename(reg_x = x, reg_y = y) %>%   tidyr::pivot_longer(     cols = c(reg_x, reg_y, log_x, log_y),     names_sep = \"_\",     names_to = c(\"log\", \"var\")   ) %>%   mutate(log = if_else(log == \"log\", TRUE, FALSE)) #visualize crab size distribution ggplot() +   geom_histogram(data = default_sim, aes(x = x), bins = 35) +   labs(x = \"Carapace width (mm)\", y = \"Count\") + mytheme #Size by maturity stage histogram ggplot() +   geom_density(data = default_sim,     aes(x = x, group = mature, color = mature, fill = mature), alpha = 0.5) +   mytheme +   labs(fill = NULL, color = NULL, x = \"Carapace width (mm)\", y = \"Density\") +   scale_color_manual(values = c(\"0\" = \"#368aab\", \"1\" = \"#993843\"),     breaks = c(0, 1),     labels = c(\"0\" = \"Immature\", \"1\" = \"Mature\")) +   scale_fill_manual(values = c(\"0\" = \"#7bbcd5\", \"1\" = \"#CA6E78\"),     breaks = c(0, 1),     labels = c(\"0\" = \"Immature\", \"1\" = \"Mature\")) temp_df <- default_sim_long %>% pivot_wider(names_from = var)  ggplot(data = temp_df, aes(x = x, y = y, color = mature)) +   geom_point(alpha = 0.5, size = 1) +   facet_wrap(~log, scales = \"free\",     labeller = as_labeller(       c(\"FALSE\" = \"Normal scale\", \"TRUE\" = \"Log scale\"))) +   mytheme +   labs(x = \"Carapace width (mm)\", y = \"Chela height (mm)\", color = NULL) +   scale_color_manual(values = c(\"0\" = \"#7bbcd5\", \"1\" = \"#CA6E78\"),     breaks = c(0, 1),     labels = c(\"0\" = \"Immature\", \"1\" = \"Mature\")) +   geom_vline(data = filter(temp_df, log == TRUE), aes(xintercept = log(100)),     lty = \"dashed\", color = \"grey\") +   geom_vline(data = filter(temp_df, log == FALSE), aes(xintercept = 100),     lty = \"dashed\", color = \"grey\")"},{"path":[]},{"path":"https://rmk118.github.io/morphmat/articles/simulations.html","id":"setup","dir":"Articles","previous_headings":"Changing parameters","what":"Setup","title":"Simulating data","text":"Now, adjust input values simulation function generate realistic data. change parameters three ways: slope logistic curve (sharpness transition maturity), allometric slope intercept, magnitude error data. Instead leaving slope parameter 5, try values 1 10. Values 10 initially tested, degree overlap mature immature groups far beyond likely observed nature. test five different options allometric growth changes upon reaching maturity, including default change. test three options magnitude errors. three options normal distribution extremely small SD (essentially error), SD equal 1/20 range x-axis variable, SD 1/15 range x-axis variable. Now create data frame possible combinations parameters create simulated data set combination.","code":"slope_options <- c(1:10) # Create data frame of allometric parameter vectors params_df <- tribble(   ~ name, ~ vec,   # No change in the slope or intercept - default   \"no_change\", c(1.2, 0.1, 1.2, 0.1),      # No change in the slope, slight increase in the intercept: the relative size   # of chela is the same with varying CWs within a maturity stage, but becomes   # proportionally larger upon reaching maturity.   \"parallel\", c(1.1, 0.1, 1.1, 0.15),      # Slight increase in the slope, no change in the intercept. The relative size   # of the chela does not become proportionately larger upon reaching maturity,   # but the rate at which chela size increases with increasing body size is   # higher for adult crabs compared to juveniles (goes from allometric to   # slightly hyperallometric).   \"allo_to_hyper\", c(1, 0.2, 1.1, 0.2),      # Moderate increase in the slope, moderate decrease in the intercept. The   # relative size of the chela becomes smaller upon reaching maturity, but the   # rate at which chela size increases with increasing body size is higher for   # adult crabs compared to juveniles (goes from allometric to hyperallometric).   \"crossing\", c(1, 0.25, 1.25, 0.08),      # Large increase in the slope, large decrease in the intercept. The relative   # size of the chela becomes much smaller upon reaching maturity, but the rate   # at which chela size increases with increasing body size is much higher for   # adult crabs compared to juveniles (goes from slightly hypoallometric to   # hyperallometric).   \"hypo_to_hyper\", c(0.9, 0.27, 1.75, 0.006) ) err_options_df <- tribble(   ~errs, ~err,   \"none\", 10^9,   \"low\",   20,   \"high\",  15) params_df <- expand_grid(params_df, slope_options)  err_params_df <- params_df %>% expand_grid(err_options_df)  fake_crustaceans <- err_params_df %>%   rowwise() %>%   mutate(output = list(     fake_crustaceans(       allo_params = vec,       slope = slope_options,       error_scale = err     )   )) %>%   unnest(output)"},{"path":"https://rmk118.github.io/morphmat/articles/simulations.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"Simulating data","text":"can see slope logistic distribution becomes less steep higher values . lower values representative species little intraspecific variation size maturity; true L50 100 mm, almost individuals become mature close 100 mm. contrast, high parameters represent species significant variation L50 individuals. Probability maturity function varying slope parameters. vertical dashed line represents size maturity/inflection point/location parameter, set 100 mm. Another way visualizing impact changing slope parameter () comparing density plots maturity CW. can see area intersection immature mature curves increases increasing values . right tail immature distribution extends much higher CW values =10 compared =1, left tail mature distribution extends much lower. Density plots illustrating smoothed distributions mature immature crabs range carapace widths four different values controlling shape underlying logistic function. Let’s visualize data default slope parameter 5 minimal error: Original scale Log scale Chela height (mm) vs. carapace width (mm) different allometric parameter sets Log chela height vs. log carapace width different allometric parameter sets Now add data points three different error levels: Original scale Log scale Chela height (mm) vs. carapace width (mm) different allometric parameter sets error options Log chela height vs. log carapace width different allometric parameter sets error options Keeping error levels low, allometric parameter set looks like change logistic slope parameter: Original scale Log scale Chela height vs. carapace width different allometric parameter sets logistic slope options Log chela height vs. log carapace width different allometric parameter sets logistic slope options","code":"pal <- c(\"#5D74A5\", \"#819AC2\", \"#A6C1DF\", \"#CAD9DC\", \"#ECEDCE\",          \"#F9E3B6\", \"#F1BD96\", \"#E39778\", \"#C57663\", \"#A8554E\")  # Logistic curves with different slope parameters ggplot()+   geom_line(data = fake_crustaceans,              aes(x = x, y = prob_mat, color = as.factor(slope_options)),              linewidth = 1)+   theme_light()+   geom_vline(xintercept = 100, lty = \"dashed\",              color = \"gray2\", linewidth = 0.5)+   scale_color_manual(values = pal)+   labs(x = \"Carapace width (mm)\", y = \"Probability of maturity\",        color = \"Slope parameter\")+   theme(     axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),     axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)),     text = element_text(size = 13)) #Size by maturity stage density plots fake_crustaceans %>%   filter(slope_options %in% c(1, 4, 7, 10)) %>%   ggplot() +   geom_density(aes(x = x, group = mature, color = mature, fill = mature),     alpha = 0.5) +   mytheme +   facet_wrap(~slope_options, ncol = 1) +   labs(fill = NULL, color = NULL, x = \"Carapace width (mm)\", y = \"Density\") +   scale_color_manual(     values = c(\"0\" = \"#368aab\", \"1\" = \"#993843\"), breaks = c(0, 1),     labels = c(\"0\" = \"Immature\", \"1\" = \"Mature\")) +   scale_fill_manual(     values = c(\"0\" = \"#7bbcd5\", \"1\" = \"#CA6E78\"), breaks = c(0, 1),     labels = c(\"0\" = \"Immature\", \"1\" = \"Mature\")) # Lines only - original scale fake_crustaceans %>% filter(slope_options == 5, errs == \"none\") %>%   ggplot() +   geom_point(aes(x = x, y = y, color = mature), size = 1, alpha = 0.5) +   facet_wrap(~name) +   mytheme +   labs(x = \"Carapace width (mm)\", y = \"Chela height (mm)\", color = NULL) +   geom_vline(xintercept = 100, lty = \"dashed\", color = \"gray\") +   scale_color_manual(values = c(\"0\" = \"#7bbcd5\", \"1\" = \"#CA6E78\"),     breaks = c(0, 1),     labels = c(\"0\" = \"Immature\", \"1\" = \"Mature\")) # Lines only - log scale fake_crustaceans %>%    filter(slope_options == 5, errs == \"none\") %>%   ggplot() +   geom_point(aes(x = log_x, y = log_y, color = mature), size = 1, alpha = 0.5) +   facet_wrap(~name) +   mytheme +   labs(x = \"Log carapace width (mm)\",        y = \"Log chela height (mm)\",        color = NULL) +   geom_vline(xintercept = log(100), lty = \"dashed\", color = \"gray\") +   scale_color_manual(values = c(\"0\" = \"#7bbcd5\", \"1\" = \"#CA6E78\"),     breaks = c(0, 1),     labels = c(\"0\" = \"Immature\", \"1\" = \"Mature\")) # Points and lines for one shape parameter and 3 error combos - original scale fake_crustaceans %>% filter(slope_options == 5) %>%   ggplot() +   geom_vline(xintercept = 100, lty = \"dashed\", color = \"gray\") +   geom_point(aes(x = x, y = y, color = mature, fill = mature),      alpha = 0.5, shape = 21, size = 1, stroke = 0) +   facet_grid(errs ~ name) +   mytheme +   labs(x = \"Carapace width (mm)\", y = \"Chela height (mm)\",        color = NULL, fill = NULL) +   scale_color_manual(     values = c(\"0\" = \"#368aab\", \"1\" = \"#993843\"), breaks = c(0, 1),     labels = c(\"0\" = \"Immature\", \"1\" = \"Mature\")) +   scale_fill_manual(     values = c(\"0\" = \"#7bbcd5\", \"1\" = \"#CA6E78\"), breaks = c(0, 1),     labels = c(\"0\" = \"Immature\", \"1\" = \"Mature\")) +   guides(lty = \"none\",           color = guide_legend(override.aes = list(size = 3, alpha = 1))) +   scale_x_continuous(breaks = c(100, 200)) # Points and lines for one shape parameter and 3 error combos - log scale fake_crustaceans %>% filter(slope_options == 5) %>%   ggplot() +   geom_vline(xintercept = log(100), lty = \"dashed\", color = \"gray\") +   geom_point(aes(x = log_x, y = log_y, color = mature, fill = mature),      alpha = 0.5, shape = 21, size = 1, stroke = 0) +   facet_grid(errs ~ name) +   mytheme +   labs(x = \"Log carapace width (mm)\", y = \"Log chela height (mm)\",        color = NULL, fill = NULL) +   scale_color_manual(     values = c(\"0\" = \"#368aab\", \"1\" = \"#993843\"), breaks = c(0, 1),     labels = c(\"0\" = \"Immature\", \"1\" = \"Mature\")) +   scale_fill_manual(     values = c(\"0\" = \"#7bbcd5\", \"1\" = \"#CA6E78\"), breaks = c(0, 1),     labels = c(\"0\" = \"Immature\", \"1\" = \"Mature\")) +   guides(lty = \"none\",           color = guide_legend(override.aes = list(size = 3, alpha = 1))) +   scale_x_continuous(breaks = c(3, 4, 5)) fake_crustaceans %>%    filter(errs == \"low\", slope_options %in% c(1, 4, 7, 10)) %>%   ggplot() +   geom_vline(xintercept = 100, lty = \"dashed\", color = \"gray\") +   geom_point(aes(x = x, y = y, color = mature, fill = mature),     shape = 21, alpha = 0.5, size = 1, stroke = 0) +   facet_grid(slope_options ~ name) +   mytheme +   labs(x = \"Carapace width (mm)\", y = \"Chela height (mm)\",     color = NULL, fill = NULL) +   scale_color_manual(     values = c(\"0\" = \"#368aab\", \"1\" = \"#993843\"), breaks = c(0, 1),     labels = c(\"0\" = \"Immature\", \"1\" = \"Mature\")) +   scale_fill_manual(     values = c(\"0\" = \"#7bbcd5\", \"1\" = \"#CA6E78\"), breaks = c(0, 1),     labels = c(\"0\" = \"Immature\", \"1\" = \"Mature\")) +   guides(lty = \"none\",     fill = guide_legend(override.aes = list(size = 3, alpha = 1))) +   scale_x_continuous(breaks = c(100, 200)) fake_crustaceans %>%    filter(errs == \"low\", slope_options %in% c(1, 4, 7, 10)) %>%   ggplot() +   geom_vline(xintercept = log(100), lty = \"dashed\", color = \"gray\") +   geom_point(aes(x = log_x, y = log_y, color = mature, fill = mature),     shape = 21, alpha = 0.5, size = 1, stroke = 0) +   facet_grid(slope_options ~ name) +   mytheme +   labs(x = \"Log carapace width (mm)\", y = \"Log chela height (mm)\",     color = NULL, fill = NULL) +   scale_color_manual(     values = c(\"0\" = \"#368aab\", \"1\" = \"#993843\"), breaks = c(0, 1),     labels = c(\"0\" = \"Immature\", \"1\" = \"Mature\")) +   scale_fill_manual(     values = c(\"0\" = \"#7bbcd5\", \"1\" = \"#CA6E78\"), breaks = c(0, 1),     labels = c(\"0\" = \"Immature\", \"1\" = \"Mature\")) +   guides(lty = \"none\",     fill = guide_legend(override.aes = list(size = 3, alpha = 1))) +   scale_x_continuous(breaks = c(3, 4, 5))"},{"path":"https://rmk118.github.io/morphmat/articles/two-line.html","id":"sec-twoA","dir":"Articles","previous_headings":"","what":"Description","title":"Two-line models","text":"Two-line models differ broken-stick models intersection point line representing immature individuals line representing mature individuals necessarily optimal breakpoint value (value x-axis y-values switch predicted immature line predicted mature line). test two slightly different versions approach using code Crab_Maturity (Olsen Stevens 2020). first version uses piecewise regression model find x-value/breakpoint gives lowest mean square error (MSE) iteratively testing observed x-value within range unknown maturity. second version, tested x-values evenly spaced points within unknown range, may equal actual observed values (like REGRANS). number (therefore interval ) points can user-defined. SM50 defined optimal breakpoint point two lines actually intersect; .e. regression equations predict y-value. intersection point may much lower higher previously determined breakpoint can even negative, often reasonable use breakpoint estimate SM50.","code":""},{"path":"https://rmk118.github.io/morphmat/articles/two-line.html","id":"two-line-standard","dir":"Articles","previous_headings":"","what":"Two-line: standard","title":"Two-line models","text":"default function call iterates 100 evenly-spaced points default upper lower bounds (0.2 0.8 quantiles x-axis variable) region search possible SM50 values.  result relatively robust number breakpoints tested: Alternatively, possible breakpoints can restricted values x-axis variable present data:","code":"set.seed(12) # set seed for reproducibility  fc <- fake_crustaceans(   error_scale = 17,   slope = 9,   L50 = 75, # known size at maturity is 75 mm   n = 800, # sample size   allo_params = c(0.9, 0.25, 1.05, 0.2),   x_mean = 85 # mean carapace width of the sample ) two_line_est <- two_line(fc, \"x\", \"y\", verbose = FALSE) two_line_est #>   breakpoint intersection  #>     75.43651     56.76587 TL_full <- two_line(fc, \"x\", \"y\", verbose = TRUE)  # Plot results ggplot(data = TL_full$data) +   geom_point(aes(x, y, color = as.factor(group))) +   labs(x = \"CW (mm)\", y = \"CH (mm)\", color = \"Predicted maturity\",     linetype = NULL) +   mytheme +   scale_color_manual(     values = c(\"1\" = \"#7bbcd5\", \"2\" = \"#CA6E78\"),     breaks = c(1, 2),     labels = c(\"1\" = \"Immature\", \"2\" = \"Mature\")) +   annotate(     geom = \"segment\",       x = 0,       y = TL_full$imm_int,       xend = TL_full$breakpoint,       yend = TL_full$imm_int + TL_full$imm_slope * TL_full$breakpoint,     color = \"#368aab\",     linewidth = 1   ) +   annotate(     geom = \"segment\",     x = TL_full$breakpoint,     y = TL_full$mat_int + TL_full$mat_slope * TL_full$breakpoint,     xend = max(TL_full$data$x),     yend = TL_full$mat_int + TL_full$mat_slope * max(TL_full$data$x),     color = \"#993843\",     linewidth = 1) +   geom_vline(aes(xintercept = TL_full$breakpoint, linetype = \"Estimated SM50\"),              linewidth = 0.5) +   geom_vline(aes(xintercept = 75, linetype = \"True SM50\"), linewidth = 0.5) +   annotate(\"text\", x = c(40, 40, 40), y = c(35, 30, 32),     label = c(       sprintf(\"SM[50] == %.3g * mm\",               TL_full$breakpoint),       sprintf(         \"y[1] ==  %.3g + %.3g * x\",         TL_full$imm_int,         TL_full$imm_slope),       sprintf(         \"y[2] == %.3g + %.3g * x\", TL_full$mat_int, TL_full$mat_slope)),     parse = TRUE) two_line(fc, \"x\", \"y\", verbose = FALSE, num_bps = 50) #>   breakpoint intersection  #>     75.51575     56.76587 two_line(fc, \"x\", \"y\", verbose = FALSE, num_bps = 400) #>   breakpoint intersection  #>     75.53869     56.31673 two_line(fc, \"x\", \"y\", verbose = FALSE, bps = \"obs\") #>   breakpoint intersection  #>     75.60928     56.61033"},{"path":"https://rmk118.github.io/morphmat/articles/two-line.html","id":"two-line-logistic-transition","dir":"Articles","previous_headings":"","what":"Two-line: logistic transition","title":"Two-line models","text":"Custom plot:","code":"tll_est <- two_line_logistic(fc, \"x\", \"y\", verbose = FALSE) tll_est #>     SM50  #> 77.68165 tll_full <- two_line_logistic(fc, \"x\", \"y\", verbose = TRUE)  nlstools::overview(tll_full) #>  #> ------ #> Formula: yvar ~ TLL_fun(xvar, int1, slope1, int2, slope2, SM50, alpha) #>  #> Parameters: #>        Estimate Std. Error t value Pr(>|t|)     #> int1   -0.63809    1.69216  -0.377   0.7062     #> slope1  0.19444    0.03007   6.467 1.75e-10 *** #> int2   -4.24833    2.02491  -2.098   0.0362 *   #> slope2  0.28825    0.01897  15.192  < 2e-16 *** #> SM50   77.68165    2.21651  35.047  < 2e-16 *** #> alpha   3.88563    1.70331   2.281   0.0228 *   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 3.061 on 794 degrees of freedom #>  #> Number of iterations to convergence: 8  #> Achieved convergence tolerance: 1.49e-08 #>  #> ------ #> Residual sum of squares: 7440  #>  #> ------ #> t-based confidence interval: #>              2.5%      97.5% #> int1   -3.9597356  2.6835487 #> slope1  0.1354153  0.2534587 #> int2   -8.2231391 -0.2735231 #> slope2  0.2510070  0.3254961 #> SM50   73.3307378 82.0325552 #> alpha   0.5421100  7.2291453 #>  #> ------ #> Correlation matrix: #>              int1     slope1       int2     slope2       SM50      alpha #> int1    1.0000000 -0.9877163  0.2100545 -0.1960934 -0.5682064  0.4767719 #> slope1 -0.9877163  1.0000000 -0.2446223  0.2285040  0.6113271 -0.5474000 #> int2    0.2100545 -0.2446223  1.0000000 -0.9951569  0.3491050  0.6073642 #> slope2 -0.1960934  0.2285040 -0.9951569  1.0000000 -0.3466532 -0.5693816 #> SM50   -0.5682064  0.6113271  0.3491050 -0.3466532  1.0000000 -0.2245592 #> alpha   0.4767719 -0.5474000  0.6073642 -0.5693816 -0.2245592  1.0000000 tll_confint <- nlstools::confint2(tll_full, parm = \"SM50\",                      method = \"asymptotic\") # or method = \"profile\" fc %>%   mutate(y_pred = predict(tll_full)) %>%   ggplot() +   geom_rect(aes(     xmin = tll_confint[\"SM50\", 1],     xmax = tll_confint[\"SM50\", 2],     ymin = -Inf,     ymax = Inf,     fill = \"lightgrey\"), data = data.frame(x=c(1))   ) +   geom_vline(aes(     xintercept = summary(tll_full)$parameters[\"SM50\", \"Estimate\"],     linetype = \"Est. SM50\"), linewidth = 0.5) +   geom_point(aes(x, y)) +    mytheme +   geom_vline(aes(xintercept = 75, linetype = \"True SM50\"), linewidth = 0.5) +   geom_line(aes(x = x, y = y_pred),             linewidth = 1.5,             color = \"red\") +   scale_linetype_manual(values = c(\"solid\", \"dotted\")) +   labs(x = \"CW (mm)\", y = \"CH (mm)\", linetype = NULL, fill = NULL) +   scale_fill_manual(values = \"lightgrey\", labels = \"95% CI\")"},{"path":[]},{"path":"https://rmk118.github.io/morphmat/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ruby Krasnow. Author, maintainer.","code":""},{"path":"https://rmk118.github.io/morphmat/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Krasnow RM (2024). “morphmat: R package modeling size morphometric maturity.” https://github.com/rmk118/morphmat.","code":"@Misc{morphmat,   title = {morphmat: An R package for modeling size at morphometric maturity},   author = {Ruby M. Krasnow},   year = {2024},   url = {https://github.com/rmk118/morphmat}, }"},{"path":"https://rmk118.github.io/morphmat/index.html","id":"morphmat","dir":"","previous_headings":"","what":"Modeling Size at Maturity Using Morphometric Data","title":"Modeling Size at Maturity Using Morphometric Data","text":"compilation methods used estimate size (sexual) maturity based morphometric data, commonly applied crabs, lobsters, crustaceans. Approaches include modeling approaches based piecewise/segmented linear regression well numerous clustering-based methods. morphmat intended help fisheries scientists managers implement multitude computational methods developed estimating crustacean size maturity. package developed part graduate work University Maine. still work progress yet used research purposes. morphmat include user-friendly functions estimating size morphometric maturity, along guidelines choosing optimal method given dataset correctly interpreting results. novel historically popular (e.g., broken-stick regression) methods included, users able obtain SM50 estimates nearly dozen different approaches single function call. combining code various models within single package, morphmat enable application multi-model inference SM50 estimation, avoiding arbitrary selection single “best” model (Katsanevakis 2006). increasing accessibility modern statistical methods estimating SM50, hope facilitate widespread adoption improved SM50 modeling procedures. morphmat include versions methods implemented existing GitHub repositories: following scripts use morphometric data require individuals already classified mature immature. provide various examples fit maturity~length binomial models estimate SM50 obtain confidence intervals. tools can also used calculate size maturity non-crustacean fisheries. comprehensive examination type model, see Mainguy et al (2024).","code":""},{"path":"https://rmk118.github.io/morphmat/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Modeling Size at Maturity Using Morphometric Data","text":"can install development version morphmat GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"rmk118/morphmat\")"},{"path":"https://rmk118.github.io/morphmat/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Modeling Size at Maturity Using Morphometric Data","text":"","code":"library(morphmat)  set.seed(12) # for reproducibility when generating the simulated data  # Generate a simulated dataset with known size at maturity fc <- fake_crustaceans(   error_scale = 17,   slope = 9,   L50 = 75,   n = 800,   allo_params = c(0.9, 0.25, 1.05, 0.2),   x_mean = 85 )"},{"path":"https://rmk118.github.io/morphmat/index.html","id":"broken-stickpiecewise-regression-methods","dir":"","previous_headings":"Examples","what":"Broken-stick/piecewise regression methods","title":"Modeling Size at Maturity Using Morphometric Data","text":"REGRANS: Two-line logistic: Two-line model (lines fit separately; forced intersection): Broken-stick Stevens (iterates values x-axis variable present data): packages: Compare estimates piecewise regression methods:","code":"regrans(fc, \"x\", \"y\", verbose = FALSE) #> [1] 67.67091 two_line_logistic(fc, xvar = \"x\", yvar = \"y\", verbose = FALSE, SM50_start = 85) #>    SM50  #> 77.6817 two_line(fc, xvar = \"x\", yvar = \"y\", verbose = FALSE) #>   breakpoint intersection  #>     75.43651     56.76587 broken_stick_stevens(fc, xvar = \"x\", yvar = \"y\", verbose = FALSE) #> [1] 68.33387 # segmented # chngpt piecewise_mods(fc, xvar = \"x\", yvar = \"y\", method = \"all\") #>                chngpt             segmented               REGRANS  #>              67.68312              63.95451              67.67091  #>               Stevens   Two_line.breakpoint Two_line.intersection  #>              68.33387              75.43651              56.76587"},{"path":"https://rmk118.github.io/morphmat/index.html","id":"clustering-methods","dir":"","previous_headings":"Examples","what":"Clustering methods","title":"Modeling Size at Maturity Using Morphometric Data","text":"Somerton method:","code":"out_df <- somerton(fc, xvar = \"x\", yvar = \"y\")[[1]] mod <- glm(data = out_df, pred_mat_num ~ x, family = binomial(link = \"logit\")) unname(-coef(mod)[1] / coef(mod)[2]) #> [1] 77.70282"},{"path":[]},{"path":"https://rmk118.github.io/morphmat/reference/broken_stick_stevens.html","id":null,"dir":"Reference","previous_headings":"","what":"Broken-stick method from Bradley Stevens — broken_stick_stevens","title":"Broken-stick method from Bradley Stevens — broken_stick_stevens","text":"Fits broken-stick model estimate size maturity. Code adapted Dr. Bradley Stevens University Maryland Eastern Shore. Differs broken-stick methods implemented regrans(), chngpt::chngpt(), segmented::segmented(), SiZer::piecewise.linear(), etc. values x-axis variable present data tested possible SM50 values.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/broken_stick_stevens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Broken-stick method from Bradley Stevens — broken_stick_stevens","text":"","code":"broken_stick_stevens(   dat,   xvar,   yvar,   lower = NULL,   upper = NULL,   log = FALSE,   verbose = FALSE )"},{"path":"https://rmk118.github.io/morphmat/reference/broken_stick_stevens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Broken-stick method from Bradley Stevens — broken_stick_stevens","text":"dat data frame matrix containing data xvar Name column (integer double) measurements x-axis variable (e.g., carapace width). yvar Name column (integer double) measurements y-axis variable (e.g., claw height). lower Integer double; lower bound possible SM50 values. Must scale data. Defaults 20th percentile x-variable. upper Integer double; upper bound possible SM50 values. Must scale data. Defaults 80th percentile x-variable. log Boolean; variables log-transformed performing regression? Defaults FALSE. verbose additional output returned besides SM50 estimate?","code":""},{"path":"https://rmk118.github.io/morphmat/reference/broken_stick_stevens.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Broken-stick method from Bradley Stevens — broken_stick_stevens","text":"verbose FALSE (default), estimate SM50. Otherwise, output list also includes original data column representing line (immature mature) point assigned , immature amd mature slope intercept parameters, F p-values final piecewise model.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/broken_stick_stevens.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Broken-stick method from Bradley Stevens — broken_stick_stevens","text":"","code":"set.seed(12) fc <- fake_crustaceans(n = 100, L50 = 100, allo_params = c(1, 0.2, 1.1, 0.2)) broken_stick_stevens(fc, xvar = \"x\", yvar = \"y\", verbose = FALSE) #> [1] 91.10524"},{"path":"https://rmk118.github.io/morphmat/reference/cluster_mods.html","id":null,"dir":"Reference","previous_headings":"","what":"Classification approaches to estimating SM50 — cluster_mods","title":"Classification approaches to estimating SM50 — cluster_mods","text":"Classification approaches estimating SM50","code":""},{"path":"https://rmk118.github.io/morphmat/reference/cluster_mods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classification approaches to estimating SM50 — cluster_mods","text":"","code":"cluster_mods(   dat,   xvar,   yvar,   log = FALSE,   method = c(\"mclust\", \"Somerton\", \"kmeans\", \"hclust\", \"infl_pt\", \"all\") )"},{"path":"https://rmk118.github.io/morphmat/reference/cluster_mods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classification approaches to estimating SM50 — cluster_mods","text":"dat data frame matrix containing data xvar Name column (integer double) measurements x-axis variable (e.g., carapace width). yvar Name column (integer double) measurements y-axis variable (e.g., claw height). log Boolean; variables log-transformed performing regression? Defaults FALSE. method Classification method use. single string vector containing one c(\"mclust\", \"Somerton\", \"kmeans\", \"hclust\", \"infl_pt\"), \"\" return results methods comparison.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/cluster_mods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classification approaches to estimating SM50 — cluster_mods","text":"estimate SM50 specified method(s).","code":""},{"path":"https://rmk118.github.io/morphmat/reference/cluster_mods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classification approaches to estimating SM50 — cluster_mods","text":"","code":"set.seed(12) fc <- fake_crustaceans(n = 100, L50 = 100, allo_params = c(1, 0.2, 1.1, 0.2)) cluster_mods(fc, xvar = \"x\", yvar = \"y\", method = c(\"kmeans\")) #>          xvar     yvar #> 1    75.38865 15.23920 #> 2   136.54339 45.87786 #> 3    85.86511 16.92335 #> 4    86.59990 16.94732 #> 5    65.04716 13.22994 #> 6    99.55408 32.83798 #> 7    98.69303 19.95659 #> 8    92.43490 16.95435 #> 9   102.87072 33.10017 #> 10  113.56030 37.01815 #> 11   89.44561 16.65966 #> 12   79.12235 16.67990 #> 13   89.40867 16.59422 #> 14  105.23904 33.84619 #> 15  101.95168 19.91354 #> 16   90.93071 17.80021 #> 17  128.77758 40.23859 #> 18  111.81025 38.40130 #> 19  115.13936 36.00876 #> 20   99.13390 20.54175 #> 21  109.47283 34.12359 #> 22  145.14403 47.01046 #> 23  125.23958 39.72831 #> 24   98.95082 30.88344 #> 25   84.49510 17.39401 #> 26   99.65230 20.61357 #> 27  101.01789 19.53285 #> 28  107.62245 34.70028 #> 29  107.91600 37.02303 #> 30  112.24129 34.84253 #> 31  118.47962 35.78884 #> 32  146.44072 45.60869 #> 33   94.17943 18.30612 #> 34   83.59016 16.46103 #> 35   97.55087 19.09151 #> 36   95.29717 18.30308 #> 37  110.49568 35.19487 #> 38   95.40975 19.62598 #> 39  120.96211 41.17689 #> 40   84.91098 17.85249 #> 41  107.09968 36.41382 #> 42   81.88014 16.17739 #> 43  116.56269 40.69230 #> 44   73.08749 14.94097 #> 45   98.82993 31.92601 #> 46  113.98932 37.07901 #> 47   85.45893 17.69469 #> 48  108.79996 22.12360 #> 49  119.62907 36.32811 #> 50   95.14802 18.34427 #> 51  104.14630 18.36215 #> 52  102.74659 32.58723 #> 53  114.13654 38.72763 #> 54  145.40670 45.19577 #> 55   83.98220 25.13179 #> 56  119.69304 41.47791 #> 57  115.78499 37.62930 #> 58   78.71454 22.97434 #> 59   99.99923 20.76300 #> 60  111.28409 35.69627 #> 61  113.13093 36.73550 #> 62  124.88841 40.34772 #> 63  122.11537 39.69475 #> 64  108.94258 33.34561 #> 65  121.68650 39.48582 #> 66  121.93580 41.68790 #> 67  144.08211 46.75849 #> 68   62.01480 13.20176 #> 69  124.42241 39.51942 #> 70  127.90123 40.06073 #> 71   94.49199 31.06592 #> 72  110.00640 33.61806 #> 73   96.41187 19.98987 #> 74  101.34961 19.74040 #> 75  102.93379 20.95561 #> 76   92.32324 18.15865 #> 77   79.57892 15.65607 #> 78   97.32099 19.78192 #> 79  115.33512 39.78074 #> 80  101.44063 30.70302 #> 81  105.08516 20.90106 #> 82   79.51881 15.62635 #> 83  100.95779 32.92634 #> 84  128.28932 38.88932 #> 85  104.53241 20.31787 #> 86  122.94313 37.65059 #> 87  101.46551 19.94880 #> 88  127.27418 43.76838 #> 89   94.16222 18.31404 #> 90   85.73203 16.49705 #> 91  112.52897 36.28876 #> 92   85.30652 16.89971 #> 93  122.95119 40.92803 #> 94  107.58525 35.14126 #> 95  125.67406 40.66184 #> 96   98.15421 20.05136 #> 97  114.04563 35.65158 #> 98   91.10524 19.66188 #> 99  100.21973 33.14270 #> 100  84.85402 17.61139"},{"path":"https://rmk118.github.io/morphmat/reference/fake_crustaceans.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate artificial data for simulation testing — fake_crustaceans","title":"Generate artificial data for simulation testing — fake_crustaceans","text":"Generates artificial sample morphometric data specified characteristics. Recommended use set.seed() running ensure reproducibility.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/fake_crustaceans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate artificial data for simulation testing — fake_crustaceans","text":"","code":"fake_crustaceans(   L50 = 100,   slope = 5,   n = 1000,   x_mean = 105,   x_sd = 20,   allo_params = c(1.2, 0.1, 1.2, 0.1),   error_scale = 20 )"},{"path":"https://rmk118.github.io/morphmat/reference/fake_crustaceans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate artificial data for simulation testing — fake_crustaceans","text":"L50 Integer double; desired true length 50% maturity scale x-axis/reference variable. Defaults 100 mm. slope Integer double; desired slope parameter logistic equation describing probability maturity given value x-axis/reference variable. Default 5. n Sample size simulated data set. Default 1000 individuals. x_mean Mean reference variable (e.g., carapace width). Default 105 mm. x_sd Standard deviation reference variable (e.g., carapace width). Default 20 mm. allo_params numeric vector length 4 containing parameters controlling allometric relationship x y variables changes maturity. contain immature slope parameter, immature intercept parameter, mature slope parameter, mature intercept parameter, order. error_scale Scaling error added simulated data","code":""},{"path":"https://rmk118.github.io/morphmat/reference/fake_crustaceans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate artificial data for simulation testing — fake_crustaceans","text":"data frame n rows. Columns : (1) x variable original scale, (2) probability maturity individual, (3) assigned maturity status, 1 0, (4) y variable original scale, (5) log-transformed x variable, (6) log-transformed y variable","code":""},{"path":"https://rmk118.github.io/morphmat/reference/fake_crustaceans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate artificial data for simulation testing — fake_crustaceans","text":"","code":"set.seed(123) fake_crustaceans(n=25) #>            x    prob_mat mature        y    log_x    log_y #> 1   93.79049 0.224104987      0 22.59484 4.541063 3.117722 #> 2  100.39645 0.519812132      1 25.51133 4.609127 3.239123 #> 3  136.17417 0.999279492      1 34.75503 4.913935 3.548324 #> 4  106.41017 0.782795735      1 27.50829 4.667301 3.314487 #> 5  107.58575 0.820118559      1 28.25854 4.678288 3.341396 #> 6  139.30130 0.999614375      1 37.15985 4.936639 3.615229 #> 7  114.21832 0.944990284      1 30.87054 4.738112 3.429802 #> 8   79.69878 0.016952453      0 18.47184 4.378254 2.916248 #> 9   91.26294 0.148373993      1 22.84396 4.513745 3.128687 #> 10  96.08676 0.313749488      0 24.30950 4.565252 3.190867 #> 11 129.48164 0.997258014      1 33.12834 4.863539 3.500389 #> 12 112.19628 0.919772153      1 27.44566 4.720250 3.312208 #> 13 113.01543 0.931059913      1 29.12296 4.727524 3.371527 #> 14 107.21365 0.808877185      1 26.86927 4.674824 3.290983 #> 15  93.88318 0.227344896      1 24.81147 4.542051 3.211306 #> 16 140.73826 0.999710670      1 39.63867 4.946902 3.679805 #> 17 114.95701 0.952184179      1 30.00144 4.744558 3.401245 #> 18  65.66766 0.001041066      0 14.57881 4.184607 2.679569 #> 19 119.02712 0.978234507      1 30.35877 4.779351 3.413086 #> 20  95.54417 0.290869341      0 25.27583 4.559589 3.229849 #> 21  83.64353 0.036569182      0 19.47490 4.426564 2.969126 #> 22 100.64050 0.531981364      0 26.96557 4.611555 3.294561 #> 23  84.47991 0.042941829      0 20.33126 4.436514 3.012160 #> 24  90.42218 0.128356952      0 21.87246 4.504490 3.085228 #> 25  92.49921 0.182402098      0 22.22107 4.527200 3.101041"},{"path":"https://rmk118.github.io/morphmat/reference/infl_pt.html","id":null,"dir":"Reference","previous_headings":"","what":"Maturity classification based on the minimum density of CH/CW ratios — infl_pt","title":"Maturity classification based on the minimum density of CH/CW ratios — infl_pt","text":"infl_pt() can used classify individuals immature mature clear ratio y-axis variable x-axis variable separates immature mature clusters. example, effective classification method transition maturity population Tanner crabs (Chionoecetes bairdi) evident increase log(claw height)/log(carapace width) ratio 0.2 0.2. infl_pt() finds discriminating line creating kernel density estimate (visually similar smoothed histogram) y-var/x-var ratio points, finding local minimum separating two peaks representing maturity clusters.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/infl_pt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maturity classification based on the minimum density of CH/CW ratios — infl_pt","text":"","code":"infl_pt(dat, x, y, log = FALSE, plot = FALSE)"},{"path":"https://rmk118.github.io/morphmat/reference/infl_pt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maturity classification based on the minimum density of CH/CW ratios — infl_pt","text":"dat optional data frame matrix containing data x Name column (integer double vector) containing measurements x-axis variable (e.g., carapace width). y Name column (integer double vector) containing measurements y-axis variable (e.g., claw height). log Boolean; variables log-transformed performing regression? Defaults FALSE. plot Boolean; plot density curve identified minimum created?","code":""},{"path":"https://rmk118.github.io/morphmat/reference/infl_pt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maturity classification based on the minimum density of CH/CW ratios — infl_pt","text":"integer corresponding ratio (y/x) local minimum found. ratio serves discriminant line separating observations maturity status.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/infl_pt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maturity classification based on the minimum density of CH/CW ratios — infl_pt","text":"","code":"library(ggplot2) set.seed(12) x <- rnorm(100, mean = 2, sd = 3) y <- rnorm(100, mean = 15, sd = 3) z <- c(x, y) hist(z)  dat1 <- data.frame(xvar = rep(1, 200), yvar = z) infl_pt(dat1, \"xvar\", \"yvar\", plot = TRUE)  #> [1] 8.052694 fc <- fake_crustaceans(n = 100, allo_params = c(1, 0.2, 1.1, 0.2)) infl_pt(fc, \"x\", \"y\", plot = TRUE)  #> [1] 0.2562708 infl_pt(fc, \"x\", \"y\", log = TRUE, plot = TRUE)  #> [1] 0.6984696"},{"path":"https://rmk118.github.io/morphmat/reference/morphmat-package.html","id":null,"dir":"Reference","previous_headings":"","what":"morphmat: Modeling Size at Maturity Using Morphometric Data — morphmat-package","title":"morphmat: Modeling Size at Maturity Using Morphometric Data — morphmat-package","text":"compilation methods used estimate size (sexual) maturity based morphometric data, commonly applied crabs, lobsters, crustaceans. Approaches include modeling approaches based piecewise/segmentedlinear regression well numerous clustering-based methods.","code":""},{"path":[]},{"path":"https://rmk118.github.io/morphmat/reference/morphmat-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"morphmat: Modeling Size at Maturity Using Morphometric Data — morphmat-package","text":"Maintainer: Ruby Krasnow ruby.krasnow@maine.edu (ORCID)","code":""},{"path":"https://rmk118.github.io/morphmat/reference/piecewise_mods.html","id":null,"dir":"Reference","previous_headings":"","what":"Piecewise regression approaches to estimating SM50 — piecewise_mods","title":"Piecewise regression approaches to estimating SM50 — piecewise_mods","text":"wrapper function allowing multiple methods piecewise regression applied using standard format inputs. See vignette(\"broken-stick\") vignette(\"two-line\") information.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/piecewise_mods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Piecewise regression approaches to estimating SM50 — piecewise_mods","text":"","code":"piecewise_mods(   dat,   xvar,   yvar,   lower = NULL,   upper = NULL,   log = FALSE,   method = c(\"segmented\", \"chngpt\", \"regrans\", \"stevens\", \"TL\", \"all\") )"},{"path":"https://rmk118.github.io/morphmat/reference/piecewise_mods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Piecewise regression approaches to estimating SM50 — piecewise_mods","text":"dat data frame matrix containing data xvar Name column (integer double) measurements x-axis variable (e.g., carapace width). yvar Name column (integer double) measurements y-axis variable (e.g., claw height). lower Integer double; lower bound possible SM50 values. Must trans data. Defaults 20th percentile x-variable. upper Integer double; upper bound possible SM50 values. Must trans data. Defaults 80th percentile x-variable. log Boolean; variables log-transformed performing regression? Defaults FALSE. method Method use regression. single string vector containing one c(\"segmented\", \"chngpt\", \"regrans\", \"stevens\", \"TL\"), \"\" return results methods comparison.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/piecewise_mods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Piecewise regression approaches to estimating SM50 — piecewise_mods","text":"estimate SM50 specified method(s).","code":""},{"path":"https://rmk118.github.io/morphmat/reference/piecewise_mods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Piecewise regression approaches to estimating SM50 — piecewise_mods","text":"two_line_logistic() function closely related included wrapper function generally want control initial values parameters nonlinear least-squares algorithm may always converge. function primarily intended easy comparison SM50 estimates produced variety different piecewise regression models. follow-analyses, recommend calling specific function(s) interest (regrans(), broken_stick_stevens(), two_line(), segmented::segmented(), chngpt::chngpt()) exploring changing upper lower bounds possible SM50 values number breakpoints tested may influence resulting estimates.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/piecewise_mods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Piecewise regression approaches to estimating SM50 — piecewise_mods","text":"","code":"set.seed(12) fc <- fake_crustaceans(n = 100, L50 = 100, allo_params = c(1, 0.2, 1.1, 0.2)) piecewise_mods(fc, xvar = \"x\", yvar = \"y\", method = c(\"segmented\", \"chngpt\")) #>    chngpt segmented  #>  89.44561  88.71463"},{"path":"https://rmk118.github.io/morphmat/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://rmk118.github.io/morphmat/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://rmk118.github.io/morphmat/reference/regrans.html","id":null,"dir":"Reference","previous_headings":"","what":"REGRANS broken-stick regression method — regrans","title":"REGRANS broken-stick regression method — regrans","text":"REGRANS broken-stick regression method","code":""},{"path":"https://rmk118.github.io/morphmat/reference/regrans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"REGRANS broken-stick regression method — regrans","text":"","code":"regrans(   dat,   xvar,   yvar,   lower = NULL,   upper = NULL,   log = FALSE,   verbose = FALSE,   n_tries = 100 )"},{"path":"https://rmk118.github.io/morphmat/reference/regrans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"REGRANS broken-stick regression method — regrans","text":"dat data frame matrix containing data xvar Name column (integer double) measurements x-axis variable (e.g., carapace width). yvar Name column (integer double) measurements y-axis variable (e.g., claw height). lower Integer double; lower bound possible SM50 values. Must scale data. Defaults 20th percentile x-variable. upper Integer double; upper bound possible SM50 values. Must scale data. Defaults 80th percentile x-variable. log Boolean; variables log-transformed performing regression? Defaults FALSE. verbose Return breakpoints tested sum squares, estimated SM50? n_tries Number breakpoints test within unknown range.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/regrans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"REGRANS broken-stick regression method — regrans","text":"verbose = TRUE, data frame breakpoints tested sum squares. Otherwise, single value breakpoint lowest sum squares.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/regrans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"REGRANS broken-stick regression method — regrans","text":"","code":"set.seed(12) fc <- fake_crustaceans(n = 100, L50 = 100, allo_params = c(1, 0.2, 1.1, 0.2)) regrans(fc, \"x\", \"y\", verbose = FALSE) #> [1] 89.43822 head(regrans(fc, \"x\", \"y\", verbose = TRUE), n = 30) #>    changept   sum_sq #> 1  89.43822 1917.861 #> 2  89.74331 1919.376 #> 3  90.04840 1921.015 #> 4  90.35348 1922.750 #> 5  90.65857 1924.568 #> 6  90.96366 1926.505 #> 7  91.26874 1928.923 #> 8  91.57383 1931.428 #> 9  91.87892 1933.981 #> 10 92.18401 1936.569 #> 11 92.48909 1939.569 #> 12 92.79418 1943.374 #> 13 93.09927 1947.164 #> 14 93.40436 1950.928 #> 15 93.70944 1954.658 #> 16 94.01453 1958.346 #> 17 94.31962 1962.537 #> 18 94.62470 1966.590 #> 19 94.92979 1969.784 #> 20 95.23488 1973.135 #> 21 95.53997 1977.559 #> 22 95.84505 1982.278 #> 23 96.15014 1986.913 #> 24 96.45523 1991.515 #> 25 96.76032 1996.374 #> 26 97.06540 2001.115 #> 27 97.37049 2005.811 #> 28 97.67558 2011.004 #> 29 97.98066 2016.360 #> 30 98.28575 2021.730"},{"path":"https://rmk118.github.io/morphmat/reference/somerton.html","id":null,"dir":"Reference","previous_headings":"","what":"Somerton method — somerton","title":"Somerton method — somerton","text":"Somerton method","code":""},{"path":"https://rmk118.github.io/morphmat/reference/somerton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Somerton method — somerton","text":"","code":"somerton(   dat,   xvar,   yvar,   log = FALSE,   lower = NULL,   upper = NULL,   max_iter = 50 )"},{"path":"https://rmk118.github.io/morphmat/reference/somerton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Somerton method — somerton","text":"dat data frame matrix containing data xvar Name column (integer double) measurements x - axis variable (e.g., carapace width). yvar Name column (integer double) measurements y-axis variable (e.g., claw height). log Boolean; variables log-transformed performing regression? Defaults FALSE. lower Integer double; lower bound possible SM50 values. Must trans data. Defaults 20th percentile x-variable. upper Integer double; upper bound possible SM50 values. Must trans data. Defaults 80th percentile x-variable. max_iter Maximum number iterations","code":""},{"path":"https://rmk118.github.io/morphmat/reference/somerton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Somerton method — somerton","text":"Output list also includes input data frame column specifying maturity group point assigned , vectors R-squared residual sum squares iteration, linear model objects corresponding maturity group.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/somerton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Somerton method — somerton","text":"","code":"set.seed(12) fc <- fake_crustaceans(n = 100, L50 = 100, allo_params = c(1, 0.2, 1.1, 0.2)) out_df <- somerton(fc, xvar = \"x\", yvar = \"y\")[[1]] mod <- glm(data = out_df, pred_mat_num ~ x, family = binomial(link = \"logit\")) unname(-coef(mod)[1] / coef(mod)[2]) #> [1] 102.37"},{"path":"https://rmk118.github.io/morphmat/reference/two_line.html","id":null,"dir":"Reference","previous_headings":"","what":"Two-line regression method for estimating size at maturity — two_line","title":"Two-line regression method for estimating size at maturity — two_line","text":"Fits separate linear models allometric growth immature mature individuals. Code adapted Dr. Bradley Stevens University Maryland Eastern Shore.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/two_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Two-line regression method for estimating size at maturity — two_line","text":"","code":"two_line(   dat,   xvar,   yvar,   lower = NULL,   upper = NULL,   verbose = FALSE,   bps = \"even\",   log = FALSE,   num_bps = 100 )"},{"path":"https://rmk118.github.io/morphmat/reference/two_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Two-line regression method for estimating size at maturity — two_line","text":"dat data frame matrix containing data xvar Name column (integer double) measurements x-axis variable (e.g., carapace width). yvar Name column (integer double) measurements y-axis variable (e.g., claw height). lower Integer double; lower bound possible SM50 values. Must scale data. Defaults 20th percentile x-variable. upper Integer double; upper bound possible SM50 values. Must scale data. Defaults 80th percentile x-variable. verbose additional output returned besides SM50 estimate? bps values tested possible breakpoints restricted observed values x-variable (\"obs\"), specified number evenly-spaced values lower upper limits unknown region (\"even\", default) log Boolean; variables log-transformed performing regression? Defaults FALSE. num_bps bps = \"even\", many values tested possible endpoints? Defaults 100, increased.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/two_line.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Two-line regression method for estimating size at maturity — two_line","text":"verbose FALSE (default), two possible estimates SM50: breakpoint x-value marking transition immature mature points/lines, intersection point two lines cross. intersection value typically extremely unrealistic unless slopes lines drastically different. verbose TRUE, output list also includes original data column representing line (immature mature) point assigned , immature mature slope intercept parameters, intersection point two lines.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/two_line.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Two-line regression method for estimating size at maturity — two_line","text":"optimal breakpoint lines found minimizing residual sum squares iterating (1) num_bps evenly-spaced values within possible range (2) values x-axis variable present unknown range.","code":""},{"path":[]},{"path":"https://rmk118.github.io/morphmat/reference/two_line.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Two-line regression method for estimating size at maturity — two_line","text":"","code":"#' set.seed(12) fc <- fake_crustaceans(n = 100, L50 = 100, allo_params = c(1, 0.2, 1.1, 0.2)) two_line(fc, xvar = \"x\", yvar = \"y\", verbose = FALSE) #>   breakpoint intersection  #>     104.1017    1561.0893"},{"path":"https://rmk118.github.io/morphmat/reference/two_line_logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Two-line logistic model — two_line_logistic","title":"Two-line logistic model — two_line_logistic","text":"Fits nonlinear model made two distinct line segments connected logistic curve.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/two_line_logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Two-line logistic model — two_line_logistic","text":"","code":"two_line_logistic(   dat,   xvar,   yvar,   imm_int = 1,   imm_slope = 0.2,   mat_int = 4,   mat_slope = 0.3,   SM50_start = NULL,   alpha_start = 9,   log = FALSE,   verbose = FALSE )"},{"path":"https://rmk118.github.io/morphmat/reference/two_line_logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Two-line logistic model — two_line_logistic","text":"dat data frame matrix containing data xvar Name column (integer double) measurements x-axis variable (e.g., carapace width). yvar Name column (integer double) measurements y-axis variable (e.g., claw height). imm_int Starting value immature intercept parameter fitting NLS model imm_slope tarting value immature slope parameter fitting NLS model mat_int Starting value mature intercept parameter fitting NLS model mat_slope Starting value mature slope parameter fitting NLS model SM50_start Starting value SM50 parameter fitting NLS model. provided, taken median x-variable alpha_start Starting value logistic slope parameter fitting NLS model log Boolean; variables log-transformed performing regression? Defaults FALSE. verbose additional output returned besides SM50 estimate?","code":""},{"path":"https://rmk118.github.io/morphmat/reference/two_line_logistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Two-line logistic model — two_line_logistic","text":"verbose FALSE (default), estimate SM50. Otherwise, output NLS model object.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/two_line_logistic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Two-line logistic model — two_line_logistic","text":"relies minpack.lm::nlsLM(), often able converge default stats::nls() function find solution.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/two_line_logistic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Two-line logistic model — two_line_logistic","text":"","code":"set.seed(12) fc <- fake_crustaceans(   error_scale = 17,   slope = 9,   L50 = 75,   n = 800,   allo_params = c(0.9, 0.25, 1.05, 0.2),   x_mean = 85 ) two_line_logistic(fc, \"x\", \"y\", verbose = FALSE) #>     SM50  #> 77.68165"}]
