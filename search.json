[{"path":"https://rmk118.github.io/morphmat/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 morphmat authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rmk118.github.io/morphmat/articles/classification.html","id":"clustering-methods","dir":"Articles","previous_headings":"","what":"Clustering methods","title":"Classification methods","text":"hclust, kmeans, hkmeans, PAM, OPTICS, DBSCAN, HDBSCAN, Somerton method, mclust","code":""},{"path":[]},{"path":[]},{"path":"https://rmk118.github.io/morphmat/articles/classification.html","id":"discriminant-analysis","dir":"Articles","previous_headings":"","what":"Discriminant Analysis","title":"Classification methods","text":"Talk drawbacks reasons unnecessary, mention instances might useful (stock assessment, applications related species)","code":""},{"path":"https://rmk118.github.io/morphmat/articles/classification.html","id":"post-classification-logistic-regression","dir":"Articles","previous_headings":"","what":"Post-classification logistic regression","title":"Classification methods","text":"Basic logistic regression, GLMMs, GAMs, sdmTMB, etc. Methods obtaining standard errors/CIs SM50 parameter (Delta method, Fieller method, etc.) BAYESIAN","code":""},{"path":"https://rmk118.github.io/morphmat/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ruby Krasnow. Author, maintainer.","code":""},{"path":"https://rmk118.github.io/morphmat/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Krasnow RM (2024). “morphmat: R package modeling size morphometric maturity.” https://github.com/rmk118/morphmat.","code":"@Misc{morphmat,   title = {morphmat: An R package for modeling size at morphometric maturity},   author = {Ruby M. Krasnow},   year = {2024},   url = {https://github.com/rmk118/morphmat}, }"},{"path":"https://rmk118.github.io/morphmat/index.html","id":"morphmat","dir":"","previous_headings":"","what":"Modeling Size at Maturity Using Morphometric Data","title":"Modeling Size at Maturity Using Morphometric Data","text":"compilation methods used estimate size (sexual) maturity based morphometric data, commonly applied crabs, lobsters, crustaceans. Approaches include modeling approaches based piecewise/segmented linear regression well numerous clustering-based methods.","code":""},{"path":"https://rmk118.github.io/morphmat/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Modeling Size at Maturity Using Morphometric Data","text":"can install development version morphmat GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"rmk118/morphmat\")"},{"path":"https://rmk118.github.io/morphmat/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Modeling Size at Maturity Using Morphometric Data","text":"basic example shows solve common problem:","code":"# library(morphmat) ## basic example code"},{"path":"https://rmk118.github.io/morphmat/reference/broken_stick.html","id":null,"dir":"Reference","previous_headings":"","what":"Broken-stick (segmented) approaches to estimating SM50 — broken_stick","title":"Broken-stick (segmented) approaches to estimating SM50 — broken_stick","text":"wrapper function allowing multiple methods broken-stick regression applied using standard format inputs. See vignette(\"broken-stick\") information.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/broken_stick.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Broken-stick (segmented) approaches to estimating SM50 — broken_stick","text":"","code":"broken_stick(   dat,   xvar,   yvar,   verbose = FALSE,   ci = 95,   lower = NULL,   upper = NULL,   trans = \"none\",   method = c(\"segmented\", \"chngpt\", \"regrans\", \"stevens\", \"all\") )"},{"path":"https://rmk118.github.io/morphmat/reference/broken_stick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Broken-stick (segmented) approaches to estimating SM50 — broken_stick","text":"dat data frame matrix containing data xvar Name column (integer double) measurements x-axis variable (e.g., carapace width). yvar Name column (integer double) measurements y-axis variable (e.g., claw height). verbose Boolean; standard error, confidence intervals, etc. returned, just estimate SM50? ci Integer; type confidence intervals return SM50, defaults 95%. lower Integer double; lower bound possible SM50 values. Must trans data. Defaults 20th percentile x-variable. upper Integer double; upper bound possible SM50 values. Must trans data. Defaults 80th percentile x-variable. trans Transformation applied data performing regression: \"none\", \"log\" (variables log-transformed), \"std\" (variables standardized = scaled centered). string provided, transformation performed (.e., default \"none\"). method Method use regression. single string string vector containing one c(\"segmented\", \"chngpt\", \"regrans\", \"stevens\"), \"\" return results methods comparison.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/broken_stick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Broken-stick (segmented) approaches to estimating SM50 — broken_stick","text":"verbose FALSE (default), estimate SM50 specified method(s). Otherwise, output list also includes standard error confidence intervals SM50 estimate well model object(s) /regression parameters lines broken-stick models.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/broken_stick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Broken-stick (segmented) approaches to estimating SM50 — broken_stick","text":"","code":"set.seed(12) fc <- fake_crabs(n=100, L50=100, allo_params=c(1, 0.2, 1.1, 0.2)) broken_stick(fc, xvar=\"x\", yvar=\"y\", method=c(\"segmented\", \"chngpt\")) #>    chngpt segmented  #>  89.44561  88.71463"},{"path":"https://rmk118.github.io/morphmat/reference/broken_stick_stevens.html","id":null,"dir":"Reference","previous_headings":"","what":"Broken-stick method from Bradley Stevens — broken_stick_stevens","title":"Broken-stick method from Bradley Stevens — broken_stick_stevens","text":"Broken-stick method Bradley Stevens","code":""},{"path":"https://rmk118.github.io/morphmat/reference/broken_stick_stevens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Broken-stick method from Bradley Stevens — broken_stick_stevens","text":"","code":"broken_stick_stevens(   dat,   xvar,   yvar,   lower = NULL,   upper = NULL,   verbose = FALSE )"},{"path":"https://rmk118.github.io/morphmat/reference/broken_stick_stevens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Broken-stick method from Bradley Stevens — broken_stick_stevens","text":"dat data frame matrix containing data xvar Name column (integer double) measurements x-axis variable (e.g., carapace width). yvar Name column (integer double) measurements y-axis variable (e.g., claw height). lower Integer double; lower bound possible SM50 values. Must scale data. Defaults 20th percentile x-variable. upper Integer double; upper bound possible SM50 values. Must scale data. Defaults 80th percentile x-variable. verbose additional output returned besides SM50 estimate?","code":""},{"path":"https://rmk118.github.io/morphmat/reference/broken_stick_stevens.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Broken-stick method from Bradley Stevens — broken_stick_stevens","text":"verbose FALSE (default), estimate SM50. Otherwise, output list also includes original data column representing line (immature mature) point assigned , immature amd mature slope intercept parameters, F p-values final piecewise model.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/broken_stick_stevens.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Broken-stick method from Bradley Stevens — broken_stick_stevens","text":"","code":"set.seed(12) fc <- fake_crabs(n=100, L50=100, allo_params=c(1, 0.2, 1.1, 0.2)) broken_stick_stevens(fc, xvar=\"x\", yvar=\"y\", verbose = FALSE) #> [1] 91.10524"},{"path":"https://rmk118.github.io/morphmat/reference/fake_crabs.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate artificial data for simulation testing — fake_crabs","title":"Generate artificial data for simulation testing — fake_crabs","text":"Generates artificial sample morphometric data specified characteristics. Recommended use set.seed() running ensure reproducibility.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/fake_crabs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate artificial data for simulation testing — fake_crabs","text":"","code":"fake_crabs(   L50 = 100,   slope = 5,   n = 1000,   x_mean = 105,   x_sd = 20,   allo_params = c(1.2, 0.1, 1.2, 0.1),   error_scale = 20 )"},{"path":"https://rmk118.github.io/morphmat/reference/fake_crabs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate artificial data for simulation testing — fake_crabs","text":"L50 Integer double; desired true length 50% maturity scale x-axis/reference variable. Defaults 100 mm. slope Integer double; desired slope parameter logistic equation describing probability maturity given value x-axis/reference variable. Default 5. n Sample size simulated data set. Default 1000 individuals. x_mean Mean reference variable (e.g., carapace width). Default 105 mm. x_sd Standard deviation reference variable (e.g., carapace width). Default 20 mm. allo_params numeric vector length 4 containing parameters controlling allometric relationship x y variables changes maturity. contain immature slope parameter, immature intercept parameter, mature slope parameter, mature intercept parameter, order. error_scale Scaling error added simulated data","code":""},{"path":"https://rmk118.github.io/morphmat/reference/fake_crabs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate artificial data for simulation testing — fake_crabs","text":"data frame n rows. Columns : (1) x variable original scale, (2) probability maturity individual, (3) assigned maturity status, 1 0, (4) y variable original scale, (5) log-transformed x variable, (6) log-transformed y variable","code":""},{"path":"https://rmk118.github.io/morphmat/reference/fake_crabs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate artificial data for simulation testing — fake_crabs","text":"","code":"set.seed(123) fake_crabs(n=25) #>            x    prob_mat mature        y    log_x    log_y #> 1   93.79049 0.224104987      0 22.59484 4.541063 3.117722 #> 2  100.39645 0.519812132      1 25.51133 4.609127 3.239123 #> 3  136.17417 0.999279492      1 34.75503 4.913935 3.548324 #> 4  106.41017 0.782795735      1 27.50829 4.667301 3.314487 #> 5  107.58575 0.820118559      1 28.25854 4.678288 3.341396 #> 6  139.30130 0.999614375      1 37.15985 4.936639 3.615229 #> 7  114.21832 0.944990284      1 30.87054 4.738112 3.429802 #> 8   79.69878 0.016952453      0 18.47184 4.378254 2.916248 #> 9   91.26294 0.148373993      1 22.84396 4.513745 3.128687 #> 10  96.08676 0.313749488      0 24.30950 4.565252 3.190867 #> 11 129.48164 0.997258014      1 33.12834 4.863539 3.500389 #> 12 112.19628 0.919772153      1 27.44566 4.720250 3.312208 #> 13 113.01543 0.931059913      1 29.12296 4.727524 3.371527 #> 14 107.21365 0.808877185      1 26.86927 4.674824 3.290983 #> 15  93.88318 0.227344896      1 24.81147 4.542051 3.211306 #> 16 140.73826 0.999710670      1 39.63867 4.946902 3.679805 #> 17 114.95701 0.952184179      1 30.00144 4.744558 3.401245 #> 18  65.66766 0.001041066      0 14.57881 4.184607 2.679569 #> 19 119.02712 0.978234507      1 30.35877 4.779351 3.413086 #> 20  95.54417 0.290869341      0 25.27583 4.559589 3.229849 #> 21  83.64353 0.036569182      0 19.47490 4.426564 2.969126 #> 22 100.64050 0.531981364      0 26.96557 4.611555 3.294561 #> 23  84.47991 0.042941829      0 20.33126 4.436514 3.012160 #> 24  90.42218 0.128356952      0 21.87246 4.504490 3.085228 #> 25  92.49921 0.182402098      0 22.22107 4.527200 3.101041"},{"path":"https://rmk118.github.io/morphmat/reference/infl_pt.html","id":null,"dir":"Reference","previous_headings":"","what":"Maturity classification based on the minimum density of CH/CW ratios — infl_pt","title":"Maturity classification based on the minimum density of CH/CW ratios — infl_pt","text":"infl_pt() can used classify individuals immature mature clear ratio y-axis variable x-axis variable separates immature mature clusters. example, effective classification method transition maturity population Tanner crabs (Chionoecetes bairdi) evident increase log(claw height)/log(carapace width) ratio 0.2 0.2. infl_pt_fun() finds discriminating line creating kernel density estimate (visually similar smoothed histogram) y-var/x-var ratio points, finding local minimum separating two peaks representing maturity clusters.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/infl_pt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maturity classification based on the minimum density of CH/CW ratios — infl_pt","text":"","code":"infl_pt(dat, x, y, plot = FALSE)"},{"path":"https://rmk118.github.io/morphmat/reference/infl_pt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maturity classification based on the minimum density of CH/CW ratios — infl_pt","text":"dat optional data frame matrix containing data x Name column (integer double vector) containing measurements x-axis variable (e.g., carapace width). y Name column (integer double vector) containing measurements y-axis variable (e.g., claw height). plot Boolean; plot density curve identified minimum created?","code":""},{"path":"https://rmk118.github.io/morphmat/reference/infl_pt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maturity classification based on the minimum density of CH/CW ratios — infl_pt","text":"integer corresponding ratio (y/x) local minimum found. ratio serves discriminant line separating observations maturity status.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/infl_pt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maturity classification based on the minimum density of CH/CW ratios — infl_pt","text":"","code":"library(ggplot2) set.seed(12) x <- rnorm(100, mean = 2, sd = 3) y <- rnorm(100, mean = 15, sd = 3) z <- c(x, y) hist(z)  dat1 <- data.frame(xvar=rep(1, 200),yvar=z) infl_pt(dat1, \"xvar\", \"yvar\", TRUE)  #> [1] 8.052694 fc <- fake_crabs(n=100, allo_params=c(1, 0.2, 1.1, 0.2)) infl_pt(fc, \"x\", \"y\", TRUE)  #> [1] 0.2562708"},{"path":"https://rmk118.github.io/morphmat/reference/morphmat-package.html","id":null,"dir":"Reference","previous_headings":"","what":"morphmat: Modeling Size at Maturity Using Morphometric Data — morphmat-package","title":"morphmat: Modeling Size at Maturity Using Morphometric Data — morphmat-package","text":"compilation methods used estimate size (sexual) maturity based morphometric data, commonly applied crabs, lobsters, crustaceans. Approaches include modeling approaches based piecewise/segmentedlinear regression well numerous clustering-based methods.","code":""},{"path":[]},{"path":"https://rmk118.github.io/morphmat/reference/morphmat-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"morphmat: Modeling Size at Maturity Using Morphometric Data — morphmat-package","text":"Maintainer: Ruby Krasnow ruby.krasnow@maine.edu (ORCID)","code":""},{"path":"https://rmk118.github.io/morphmat/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://rmk118.github.io/morphmat/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://rmk118.github.io/morphmat/reference/regrans_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"REGRANS broken-stick regression method — regrans_fun","title":"REGRANS broken-stick regression method — regrans_fun","text":"REGRANS broken-stick regression method","code":""},{"path":"https://rmk118.github.io/morphmat/reference/regrans_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"REGRANS broken-stick regression method — regrans_fun","text":"","code":"regrans_fun(   dat,   xvar,   yvar,   lower = NULL,   upper = NULL,   verbose = FALSE,   n_tries = 100 )"},{"path":"https://rmk118.github.io/morphmat/reference/regrans_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"REGRANS broken-stick regression method — regrans_fun","text":"dat data frame matrix containing data xvar Name column (integer double) measurements x-axis variable (e.g., carapace width). yvar Name column (integer double) measurements y-axis variable (e.g., claw height). lower Integer double; lower bound possible SM50 values. Must scale data. Defaults 20th percentile x-variable. upper Integer double; upper bound possible SM50 values. Must scale data. Defaults 80th percentile x-variable. verbose Return breakpoints tested sum squares, estimated SM50? n_tries Number breakpoints test within unknown range.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/regrans_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"REGRANS broken-stick regression method — regrans_fun","text":"verbose = TRUE, data frame breakpoints tested sum squares. Otherwise, single value breakpoint lowest sum squares.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/regrans_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"REGRANS broken-stick regression method — regrans_fun","text":"","code":"set.seed(12) fc <- fake_crabs(n=100, L50=100, allo_params=c(1, 0.2, 1.1, 0.2)) regrans_fun(fc, \"x\", \"y\", verbose = FALSE) #> [1] 89.43822 head(regrans_fun(fc, \"x\", \"y\", verbose = TRUE), n=30) #>    changept   sum_sq #> 1  89.43822 1917.861 #> 2  89.74331 1919.376 #> 3  90.04840 1921.015 #> 4  90.35348 1922.750 #> 5  90.65857 1924.568 #> 6  90.96366 1926.505 #> 7  91.26874 1928.923 #> 8  91.57383 1931.428 #> 9  91.87892 1933.981 #> 10 92.18401 1936.569 #> 11 92.48909 1939.569 #> 12 92.79418 1943.374 #> 13 93.09927 1947.164 #> 14 93.40436 1950.928 #> 15 93.70944 1954.658 #> 16 94.01453 1958.346 #> 17 94.31962 1962.537 #> 18 94.62470 1966.590 #> 19 94.92979 1969.784 #> 20 95.23488 1973.135 #> 21 95.53997 1977.559 #> 22 95.84505 1982.278 #> 23 96.15014 1986.913 #> 24 96.45523 1991.515 #> 25 96.76032 1996.374 #> 26 97.06540 2001.115 #> 27 97.37049 2005.811 #> 28 97.67558 2011.004 #> 29 97.98066 2016.360 #> 30 98.28575 2021.730"},{"path":"https://rmk118.github.io/morphmat/reference/two_line_logistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Two-line logistic model — two_line_logistic","title":"Two-line logistic model — two_line_logistic","text":"Two-line logistic model","code":""},{"path":"https://rmk118.github.io/morphmat/reference/two_line_logistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Two-line logistic model — two_line_logistic","text":"","code":"two_line_logistic(   dat,   xvar,   yvar,   imm_int = 1,   imm_slope = 0.2,   mat_int = 1,   mat_slope = 0.3,   SM50_start = NULL,   alpha_start = 9,   verbose = FALSE )"},{"path":"https://rmk118.github.io/morphmat/reference/two_line_logistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Two-line logistic model — two_line_logistic","text":"dat data frame matrix containing data xvar Name column (integer double) measurements x-axis variable (e.g., carapace width). yvar Name column (integer double) measurements y-axis variable (e.g., claw height). imm_int Starting value immature intercept parameter fitting NLS model imm_slope tarting value immature slope parameter fitting NLS model mat_int Starting value mature intercept parameter fitting NLS model mat_slope Starting value mature slope parameter fitting NLS model SM50_start Starting value SM50 parameter fitting NLS model. provided, taken median x-variable alpha_start Starting value logistic slope parameter fitting NLS model verbose additional output returned besides SM50 estimate?","code":""},{"path":"https://rmk118.github.io/morphmat/reference/two_line_logistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Two-line logistic model — two_line_logistic","text":"verbose FALSE (default), estimate SM50. Otherwise, output NLS model object.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/two_line_logistic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Two-line logistic model — two_line_logistic","text":"","code":"set.seed(12) fc <- fake_crabs(n=100, L50=100, allo_params=c(1, 0.2, 1.1, 0.2)) two_line_logistic(fc, xvar=\"x\", yvar=\"y\", verbose = FALSE) #>     SM50  #> 104.7633"},{"path":"https://rmk118.github.io/morphmat/reference/two_line_stevens.html","id":null,"dir":"Reference","previous_headings":"","what":"Two-line methods from Bradley Stevens — two_line_stevens","title":"Two-line methods from Bradley Stevens — two_line_stevens","text":"Two-line methods Bradley Stevens","code":""},{"path":"https://rmk118.github.io/morphmat/reference/two_line_stevens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Two-line methods from Bradley Stevens — two_line_stevens","text":"","code":"two_line_stevens(   dat,   xvar,   yvar,   lower = NULL,   upper = NULL,   verbose = FALSE,   bps = \"even\",   num_bps = 100 )"},{"path":"https://rmk118.github.io/morphmat/reference/two_line_stevens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Two-line methods from Bradley Stevens — two_line_stevens","text":"dat data frame matrix containing data xvar Name column (integer double) measurements x-axis variable (e.g., carapace width). yvar Name column (integer double) measurements y-axis variable (e.g., claw height). lower Integer double; lower bound possible SM50 values. Must scale data. Defaults 20th percentile x-variable. upper Integer double; upper bound possible SM50 values. Must scale data. Defaults 80th percentile x-variable. verbose additional output returned besides SM50 estimate? bps values tested possible breakpoints restricted observed values x-variable (\"obs\"), specified number evenly-spaced values lower upper limits unknown region (\"even\", default) num_bps bps = \"even\", many values tested possible endpoints? Defaults 100, increased.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/two_line_stevens.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Two-line methods from Bradley Stevens — two_line_stevens","text":"verbose FALSE (default), two possible estimates SM50: breakpoint x-value marking transition immature mature points/lines, intersection point two lines cross. intersection value typically extremely unrealistic unless slopes lines drastically different. verbose TRUE, output list also includes original data column representing line (immature mature) point assigned , immature amd mature slope intercept parameters, intersection point two lines.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/two_line_stevens.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Two-line methods from Bradley Stevens — two_line_stevens","text":"","code":"#' set.seed(12) fc <- fake_crabs(n=100, L50=100, allo_params=c(1, 0.2, 1.1, 0.2)) two_line_stevens(fc, xvar=\"x\", yvar=\"y\", verbose = FALSE) #>   breakpoint intersection  #>     104.1017    1561.0893"}]
