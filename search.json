[{"path":"https://rmk118.github.io/morphmat/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 morphmat authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rmk118.github.io/morphmat/articles/classification.html","id":"clustering-methods","dir":"Articles","previous_headings":"","what":"Clustering methods","title":"Classification methods","text":"hclust, kmeans, hkmeans, PAM, OPTICS, DBSCAN, HDBSCAN, Somerton method, mclust","code":""},{"path":[]},{"path":[]},{"path":"https://rmk118.github.io/morphmat/articles/classification.html","id":"discriminant-analysis","dir":"Articles","previous_headings":"","what":"Discriminant Analysis","title":"Classification methods","text":"Talk drawbacks reasons unnecessary, mention instances might useful (stock assessment, applications related species)","code":""},{"path":"https://rmk118.github.io/morphmat/articles/classification.html","id":"post-classification-logistic-regression","dir":"Articles","previous_headings":"","what":"Post-classification logistic regression","title":"Classification methods","text":"Basic logistic regression, GLMMs, GAMs, sdmTMB, etc. Methods obtaining standard errors/CIs SM50 parameter (Delta method, Fieller method, etc.) BAYESIAN","code":""},{"path":"https://rmk118.github.io/morphmat/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ruby Krasnow. Author, maintainer.","code":""},{"path":"https://rmk118.github.io/morphmat/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Krasnow RM (2024). “morphmat: R package modeling size morphometric maturity.” https://github.com/rmk118/morphmat.","code":"@Misc{morphmat,   title = {morphmat: An R package for modeling size at morphometric maturity},   author = {Ruby M. Krasnow},   year = {2024},   url = {https://github.com/rmk118/morphmat}, }"},{"path":"https://rmk118.github.io/morphmat/index.html","id":"morphmat","dir":"","previous_headings":"","what":"Modeling Size at Maturity Using Morphometric Data","title":"Modeling Size at Maturity Using Morphometric Data","text":"compilation methods used estimate size (sexual) maturity based morphometric data, commonly applied crabs, lobsters, crustaceans. Approaches include modeling approaches based piecewise/segmented linear regression well numerous clustering-based methods.","code":""},{"path":"https://rmk118.github.io/morphmat/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Modeling Size at Maturity Using Morphometric Data","text":"can install development version morphmat GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"rmk118/morphmat\")"},{"path":"https://rmk118.github.io/morphmat/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Modeling Size at Maturity Using Morphometric Data","text":"basic example shows solve common problem:","code":"# library(morphmat) ## basic example code"},{"path":"https://rmk118.github.io/morphmat/reference/broken_stick.html","id":null,"dir":"Reference","previous_headings":"","what":"Broken-stick (segmented) approaches to estimating SM50 — broken_stick","title":"Broken-stick (segmented) approaches to estimating SM50 — broken_stick","text":"wrapper function allowing multiple methods broken-stick regression applied using standard format inputs. See vignette(\"broken-stick\") information.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/broken_stick.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Broken-stick (segmented) approaches to estimating SM50 — broken_stick","text":"","code":"broken_stick(   dat,   x,   y,   verbose = FALSE,   ci = 95,   lower = stats::quantile(x, 0.2),   upper = stats::quantile(x, 0.8),   scale = c(\"log\", \"none\", \"std\"),   method = c(\"segmented\", \"chngpt\", \"regrans\", \"stevens\", \"all\") )"},{"path":"https://rmk118.github.io/morphmat/reference/broken_stick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Broken-stick (segmented) approaches to estimating SM50 — broken_stick","text":"dat data frame matrix containing data x Integer double vector measurements x-axis variable (e.g., carapace width). y Integer double vector measurements y-axis variable (e.g., claw height). verbose Boolean; standard error, confidence intervals, ci Integer; type confidence intervals return SM50, defaults 95%. lower Integer double; lower bound possible SM50 values. Must scale data. Defaults 20th percentile x-variable. upper Integer double; upper bound possible SM50 values. Must scale data. Defaults 80th percentile x-variable. scale Transformation applied data performing regression: \"none\", \"log\" (variables log-transformed), \"std\" (variables standardized = scaled centered). string provided, transformation performed (.e., default \"none\"). method Method use regression. single string string vector containing one c(\"segmented\", \"chngpt\", \"regrans\", \"stevens\"), \"\" return results methods comparison.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/broken_stick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Broken-stick (segmented) approaches to estimating SM50 — broken_stick","text":"verbose FALSE (default), estimate SM50 specified method(s). Otherwise, output list also includes standard error confidence intervals SM50 estimate well model object(s) /regression parameters lines broken-stick models.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/broken_stick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Broken-stick (segmented) approaches to estimating SM50 — broken_stick","text":"","code":"broken_stick(iris, x=\"x\", y=\"y\", method=c(\"segmented\", \"chngpt\")) #> [1] 1 2"},{"path":"https://rmk118.github.io/morphmat/reference/fake_crabs.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate artificial data for simulation testing — fake_crabs","title":"Generate artificial data for simulation testing — fake_crabs","text":"Generates artificial sample morphometric data specified characteristics. Recommended use set.seed() running ensure reproducibility.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/fake_crabs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate artificial data for simulation testing — fake_crabs","text":"","code":"fake_crabs(   L50 = 100,   slope = 5,   n = 1000,   x_mean = 105,   x_sd = 20,   allo_params = c(1.2, 0.1, 1.2, 0.1),   error_scale = 20 )"},{"path":"https://rmk118.github.io/morphmat/reference/fake_crabs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate artificial data for simulation testing — fake_crabs","text":"L50 Integer double; desired true length 50% maturity scale x-axis/reference variable. Defaults 100 mm. slope Integer double; desired slope parameter logistic equation describing probability maturity given value x-axis/reference variable. Default 5. n Sample size simulated data set. Default 1000 individuals. x_mean Mean reference variable (e.g., carapace width). Default 105 mm. x_sd Standard deviation reference variable (e.g., carapace width). Default 20 mm. allo_params numeric vector length 4 containing parameters controlling allometric relationship x y variables changes maturity. contain immature slope parameter, immature intercept parameter, mature slope parameter, mature intercept parameter, order. error_scale Scaling error added simulated data","code":""},{"path":"https://rmk118.github.io/morphmat/reference/fake_crabs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate artificial data for simulation testing — fake_crabs","text":"data frame n rows. Columns : (1) x variable original scale, (2) probability maturity individual, (3) assigned maturity status, 1 0, (4) y variable original scale, (5) log-transformed x variable, (6) log-transformed y variable","code":""},{"path":"https://rmk118.github.io/morphmat/reference/fake_crabs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate artificial data for simulation testing — fake_crabs","text":"","code":"set.seed(123) fake_crabs(n=25) #>            x    prob_mat mature        y    log_x    log_y #> 1   93.79049 0.224104987      0 22.59484 4.541063 3.117722 #> 2  100.39645 0.519812132      1 25.51133 4.609127 3.239123 #> 3  136.17417 0.999279492      1 34.75503 4.913935 3.548324 #> 4  106.41017 0.782795735      1 27.50829 4.667301 3.314487 #> 5  107.58575 0.820118559      1 28.25854 4.678288 3.341396 #> 6  139.30130 0.999614375      1 37.15985 4.936639 3.615229 #> 7  114.21832 0.944990284      1 30.87054 4.738112 3.429802 #> 8   79.69878 0.016952453      0 18.47184 4.378254 2.916248 #> 9   91.26294 0.148373993      1 22.84396 4.513745 3.128687 #> 10  96.08676 0.313749488      0 24.30950 4.565252 3.190867 #> 11 129.48164 0.997258014      1 33.12834 4.863539 3.500389 #> 12 112.19628 0.919772153      1 27.44566 4.720250 3.312208 #> 13 113.01543 0.931059913      1 29.12296 4.727524 3.371527 #> 14 107.21365 0.808877185      1 26.86927 4.674824 3.290983 #> 15  93.88318 0.227344896      1 24.81147 4.542051 3.211306 #> 16 140.73826 0.999710670      1 39.63867 4.946902 3.679805 #> 17 114.95701 0.952184179      1 30.00144 4.744558 3.401245 #> 18  65.66766 0.001041066      0 14.57881 4.184607 2.679569 #> 19 119.02712 0.978234507      1 30.35877 4.779351 3.413086 #> 20  95.54417 0.290869341      0 25.27583 4.559589 3.229849 #> 21  83.64353 0.036569182      0 19.47490 4.426564 2.969126 #> 22 100.64050 0.531981364      0 26.96557 4.611555 3.294561 #> 23  84.47991 0.042941829      0 20.33126 4.436514 3.012160 #> 24  90.42218 0.128356952      0 21.87246 4.504490 3.085228 #> 25  92.49921 0.182402098      0 22.22107 4.527200 3.101041"},{"path":"https://rmk118.github.io/morphmat/reference/infl_pt.html","id":null,"dir":"Reference","previous_headings":"","what":"Maturity classification based on the minimum density of CH/CW ratios — infl_pt","title":"Maturity classification based on the minimum density of CH/CW ratios — infl_pt","text":"infl_pt() can used classify individuals immature mature clear ratio y-axis variable x-axis variable separates immature mature clusters. example, effective classification method transition maturity population Tanner crabs (Chionoecetes bairdi) evident increase log(claw height)/log(carapace width) ratio 0.2 0.2. infl_pt_fun() finds discriminating line creating kernel density estimate (visually similar smoothed histogram) y-var/x-var ratio points, finding local minimum separating two peaks representing maturity clusters.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/infl_pt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maturity classification based on the minimum density of CH/CW ratios — infl_pt","text":"","code":"infl_pt(dat, x, y, plot = FALSE)"},{"path":"https://rmk118.github.io/morphmat/reference/infl_pt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maturity classification based on the minimum density of CH/CW ratios — infl_pt","text":"dat optional data frame matrix containing data x Name column (integer double vector) containing measurements x-axis variable (e.g., carapace width). y Name column (integer double vector) containing measurements y-axis variable (e.g., claw height). plot Boolean; plot density curve identified minimum created?","code":""},{"path":"https://rmk118.github.io/morphmat/reference/infl_pt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maturity classification based on the minimum density of CH/CW ratios — infl_pt","text":"integer corresponding ratio (y/x) local minimum found. ratio serves discriminant line separating observations maturity status.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/infl_pt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maturity classification based on the minimum density of CH/CW ratios — infl_pt","text":"","code":"library(ggplot2) set.seed(12) x <- rnorm(100, mean = 2, sd = 3) y <- rnorm(100, mean = 15, sd = 3) z <- c(x, y) hist(z)  dat1 <- data.frame(xvar=rep(1, 200),yvar=z) infl_pt(dat1, \"xvar\", \"yvar\", TRUE)  #> [1] 8.052694 fc <- fake_crabs(n=100, allo_params=c(1, 0.2, 1.1, 0.2)) infl_pt(fc, \"x\", \"y\", TRUE)  #> [1] 0.2562708"},{"path":"https://rmk118.github.io/morphmat/reference/morphmat-package.html","id":null,"dir":"Reference","previous_headings":"","what":"morphmat: Modeling Size at Maturity Using Morphometric Data — morphmat-package","title":"morphmat: Modeling Size at Maturity Using Morphometric Data — morphmat-package","text":"compilation methods used estimate size (sexual) maturity based morphometric data, commonly applied crabs, lobsters, crustaceans. Approaches include modeling approaches based piecewise/segmentedlinear regression well numerous clustering-based methods.","code":""},{"path":[]},{"path":"https://rmk118.github.io/morphmat/reference/morphmat-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"morphmat: Modeling Size at Maturity Using Morphometric Data — morphmat-package","text":"Maintainer: Ruby Krasnow ruby.krasnow@maine.edu (ORCID)","code":""},{"path":"https://rmk118.github.io/morphmat/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://rmk118.github.io/morphmat/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://rmk118.github.io/morphmat/reference/regrans_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"REGRANS broken-stick regression method — regrans_fun","title":"REGRANS broken-stick regression method — regrans_fun","text":"REGRANS broken-stick regression method","code":""},{"path":"https://rmk118.github.io/morphmat/reference/regrans_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"REGRANS broken-stick regression method — regrans_fun","text":"","code":"regrans_fun(   x,   y,   min_changept = min(x, na.rm = TRUE),   max_changept = max(x, na.rm = TRUE),   n_tries = 100 )"},{"path":"https://rmk118.github.io/morphmat/reference/regrans_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"REGRANS broken-stick regression method — regrans_fun","text":"x Integer double vector measurements x-axis variable (e.g., carapace width). y Integer double vector measurements y-axis variable (e.g., claw height). min_changept Integer double; lower bound possible SM50 values. Must scale data. Defaults minimum value x-variable. max_changept Integer double; upper bound possible SM50 values. Must scale data. Defaults maximum value x-variable. n_tries Number breakpoints test within unknown range.","code":""},{"path":"https://rmk118.github.io/morphmat/reference/regrans_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"REGRANS broken-stick regression method — regrans_fun","text":"Data frame breakpoints tested sum squares","code":""},{"path":"https://rmk118.github.io/morphmat/reference/regrans_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"REGRANS broken-stick regression method — regrans_fun","text":"","code":"fc <- fake_crabs(n=100, allo_params=c(1, 0.2, 1.1, 0.2)) regrans_fun(fc$x, fc$y) #>      changept   sum_sq #> 1    55.14267 1740.302 #> 2    56.18517 1714.415 #> 3    57.22767 1701.996 #> 4    58.27016 1693.894 #> 5    59.31266 1676.504 #> 6    60.35516 1656.482 #> 7    61.39765 1643.079 #> 8    62.44015 1626.842 #> 9    63.48265 1608.830 #> 10   64.52514 1595.645 #> 11   65.56764 1582.010 #> 12   66.61014 1565.981 #> 13   67.65264 1553.532 #> 14   68.69513 1544.766 #> 15   69.73763 1538.582 #> 16   70.78013 1534.196 #> 17   71.82262 1531.070 #> 18   72.86512 1528.833 #> 19   73.90762 1527.232 #> 20   74.95011 1524.100 #> 21   75.99261 1521.640 #> 22   77.03511 1519.874 #> 23   78.07760 1517.714 #> 24   79.12010 1515.156 #> 25   80.16260 1513.254 #> 26   81.20509 1512.581 #> 27   82.24759 1513.851 #> 28   83.29009 1516.721 #> 29   84.33259 1520.916 #> 30   85.37508 1525.859 #> 31   86.41758 1532.073 #> 32   87.46008 1539.298 #> 33   88.50257 1546.820 #> 34   89.54507 1555.268 #> 35   90.58757 1564.659 #> 36   91.63006 1574.635 #> 37   92.67256 1585.710 #> 38   93.71506 1596.359 #> 39   94.75755 1608.942 #> 40   95.80005 1624.755 #> 41   96.84255 1641.084 #> 42   97.88504 1657.266 #> 43   98.92754 1674.348 #> 44   99.97004 1688.324 #> 45  101.01254 1700.864 #> 46  102.05503 1713.589 #> 47  103.09753 1723.844 #> 48  104.14003 1732.155 #> 49  105.18252 1737.612 #> 50  106.22502 1740.045 #> 51  107.26752 1740.199 #> 52  108.31001 1739.272 #> 53  109.35251 1737.805 #> 54  110.39501 1735.935 #> 55  111.43750 1733.743 #> 56  112.48000 1731.841 #> 57  113.52250 1729.894 #> 58  114.56499 1728.348 #> 59  115.60749 1727.004 #> 60  116.64999 1725.592 #> 61  117.69248 1724.280 #> 62  118.73498 1723.247 #> 63  119.77748 1722.260 #> 64  120.81998 1721.702 #> 65  121.86247 1721.424 #> 66  122.90497 1721.545 #> 67  123.94747 1721.846 #> 68  124.98996 1722.248 #> 69  126.03246 1722.767 #> 70  127.07496 1723.008 #> 71  128.11745 1722.826 #> 72  129.15995 1722.675 #> 73  130.20245 1722.514 #> 74  131.24494 1722.373 #> 75  132.28744 1722.261 #> 76  133.32994 1722.192 #> 77  134.37243 1722.185 #> 78  135.41493 1722.284 #> 79  136.45743 1722.461 #> 80  137.49993 1722.705 #> 81  138.54242 1723.040 #> 82  139.58492 1723.494 #> 83  140.62742 1724.104 #> 84  141.66991 1724.916 #> 85  142.71241 1725.982 #> 86  143.75491 1727.355 #> 87  144.79740 1729.071 #> 88  145.83990 1728.832 #> 89  146.88240 1728.832 #> 90  147.92489 1728.832 #> 91  148.96739 1728.832 #> 92  150.00989 1728.832 #> 93  151.05238 1728.832 #> 94  152.09488 1728.832 #> 95  153.13738 1728.832 #> 96  154.17988 1728.832 #> 97  155.22237 1728.832 #> 98  156.26487 1728.832 #> 99  157.30737 1728.832 #> 100 158.34986 1740.302"}]
